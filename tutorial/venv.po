# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kristina Mironova, 2021
# alex alev <alex.alev@bk.ru>, 2021
# Daniil Kolesnikov, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-12 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Daniil Kolesnikov, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr "Виртуальное окружение и пакеты"

#: ../../tutorial/venv.rst:9
msgid "Introduction"
msgstr "Введение"

#: ../../tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come as "
"part of the standard library.  Applications will sometimes need a specific "
"version of a library, because the application may require that a particular "
"bug has been fixed or the application may be written using an obsolete "
"version of the library's interface."
msgstr ""
"Приложения Python часто используют пакеты и модули, не входящие в "
"стандартную библиотеку. Иногда приложению необходима конкретная версия "
"библиотеки, в которой устранена определенная ошибка, или же приложение "
"написано с помощью устаревшей версии библиотечного интерфейса."

#: ../../tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the "
"requirements of every application.  If application A needs version 1.0 of a "
"particular module but application B needs version 2.0, then the requirements "
"are in conflict and installing either version 1.0 or 2.0 will leave one "
"application unable to run."
msgstr ""
"Это означает, что конкретная установка Python может быть непригодной "
"одновременно для двух или более приложений.  Например, приложению А нужна "
"версия 1.0 конкретного модуля, а приложению B нужна версия 2.0. Эти "
"требования противоречат друг другу, и установка либо версии 1.0 либо 2.0 не "
"годится одновременно для обоих приложений ."

#: ../../tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`, a "
"self-contained directory tree that contains a Python installation for a "
"particular version of Python, plus a number of additional packages."
msgstr ""
"Для разрешения конфликта создается  :term:`виртуальное окружение` (:term:"
"`virtual environment`), автономное дерево директорий, содержащее установку "
"нужной версии Python, а также ряд дополнительных пакетов."

#: ../../tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A can "
"have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will not "
"affect application A's environment."
msgstr ""
"Разные приложения используют разные виртуальные окружения. В приведенном "
"примере приложение А может использовать созданное для него виртуальное "
"окружение с версией 1.0 нужного модуля, а приложение В исполняться в другом "
"виртуальном окружении с версией 2.0 того же модуля. Если позднее приложению "
"В потребуется обновить библиотеку до версии 3.0, то это никак не повлияет на "
"виртуальное окружение приложения А."

#: ../../tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr "Создание виртуального окружения"

#: ../../tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called :mod:"
"`venv`.  :mod:`venv` will usually install the most recent version of Python "
"that you have available. If you have multiple versions of Python on your "
"system, you can select a specific Python version by running ``python3`` or "
"whichever version you want."
msgstr ""
"Для создания и управления виртуальными окружениями используется модуль :"
"mod:’venv’. По умолчанию :mod:’venv’ устанавливает самую последнюю доступную "
"версию Python. Если в вашей системе есть несколько версий Python, то  можно "
"выбрать конкретную версию Python, запустив, например, ``python3``."

#: ../../tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want to "
"place it, and run the :mod:`venv` module as a script with the directory "
"path::"
msgstr ""
"Чтобы создать виртуальное окружение, определитесь с каталогом, в котором вы "
"хотите разместить его, и запустите модуль :mod:’venv в виде сценария с "
"указание пути к этому  каталогу::"

#: ../../tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter and various supporting files."
msgstr ""
"Это создаст каталог ``tutorial-env``, если его не существует, а также "
"создаст внутри него каталоги, содержащие копию интерпретатора Python и "
"различные вспомогательные файлы."

#: ../../tutorial/venv.rst:53
msgid ""
"A common directory location for a virtual environment is ``.venv``. This "
"name keeps the directory typically hidden in your shell and thus out of the "
"way while giving it a name that explains why the directory exists. It also "
"prevents clashing with ``.env`` environment variable definition files that "
"some tooling supports."
msgstr ""

#: ../../tutorial/venv.rst:59
msgid "Once you've created a virtual environment, you may activate it."
msgstr "После создания виртуального окружения его можно активировать."

#: ../../tutorial/venv.rst:61
msgid "On Windows, run::"
msgstr "На Windows-машине запустите::"

#: ../../tutorial/venv.rst:65
msgid "On Unix or MacOS, run::"
msgstr "На Unix или MacOS выполните::"

#: ../../tutorial/venv.rst:69
msgid ""
"(This script is written for the bash shell.  If you use the :program:`csh` "
"or :program:`fish` shells, there are alternate ``activate.csh`` and "
"``activate.fish`` scripts you should use instead.)"
msgstr ""
"(Этот скрипт использует оболочку bash. Для оболочек :program:`csh` или :"
"program:`fish` надо использовать скрипты ``activate.csh`` и ``activate."
"fish`` соответственно)."

#: ../../tutorial/venv.rst:74
msgid ""
"Activating the virtual environment will change your shell's prompt to show "
"what virtual environment you're using, and modify the environment so that "
"running ``python`` will get you that particular version and installation of "
"Python. For example:"
msgstr ""
"В результате активирования виртуального окружения prompt оболочки будет "
"указывать имя используемого виртуального окружения, а команда ``python`` в "
"окружении запустит установленную версию Python. Например:"

#: ../../tutorial/venv.rst:91
msgid "To deactivate a virtual environment, type::"
msgstr "Для деактивации виртуального окружения введите::"

#: ../../tutorial/venv.rst:95
msgid "into the terminal."
msgstr "в терминал."

#: ../../tutorial/venv.rst:98
msgid "Managing Packages with pip"
msgstr "Управление пакетами с помощью pip"

#: ../../tutorial/venv.rst:100
msgid ""
"You can install, upgrade, and remove packages using a program called :"
"program:`pip`.  By default ``pip`` will install packages from the `Python "
"Package Index <https://pypi.org>`_.  You can browse the Python Package Index "
"by going to it in your web browser."
msgstr ""

#: ../../tutorial/venv.rst:105
msgid ""
"``pip`` has a number of subcommands: \"install\", \"uninstall\", \"freeze\", "
"etc.  (Consult the :ref:`installing-index` guide for complete documentation "
"for ``pip``.)"
msgstr ""
"``pip`` имеет несколько подкоманд: \"install\", \"uninstall\", \"freeze\" и "
"т.д. (Подробную документацию по ``pip`` см. в руководстве :ref:`installing-"
"index`.)"

#: ../../tutorial/venv.rst:109
msgid ""
"You can install the latest version of a package by specifying a package's "
"name:"
msgstr ""
"Для установки последней версии некоторого пакета просто укажите его имя:"

#: ../../tutorial/venv.rst:120
msgid ""
"You can also install a specific version of a package by giving the package "
"name  followed by ``==`` and the version number:"
msgstr ""
"Для установки другой версии нужно после имени пакета ввести ``==`` и номер "
"версии:"

#: ../../tutorial/venv.rst:131
msgid ""
"If you re-run this command, ``pip`` will notice that the requested version "
"is already installed and do nothing.  You can supply a different version "
"number to get that version, or you can run ``python -m pip install --"
"upgrade`` to upgrade the package to the latest version:"
msgstr ""

#: ../../tutorial/venv.rst:146
msgid ""
"``python -m pip uninstall`` followed by one or more package names will "
"remove the packages from the virtual environment."
msgstr ""

#: ../../tutorial/venv.rst:149
msgid ""
"``python -m pip show`` will display information about a particular package:"
msgstr "``python -m pip show`` отобразит информацию о конкретном пакете:"

#: ../../tutorial/venv.rst:166
msgid ""
"``python -m pip list`` will display all of the packages installed in the "
"virtual environment:"
msgstr ""
"``python -m pip list`` отобразит все установленные пакеты в виртуальном "
"окружении:"

#: ../../tutorial/venv.rst:178
msgid ""
"``python -m pip freeze`` will produce a similar list of the installed "
"packages, but the output uses the format that ``python -m pip install`` "
"expects. A common convention is to put this list in a ``requirements.txt`` "
"file:"
msgstr ""
"``python -m pip freeze`` выведет аналогичный список установленных пакетов, "
"но вывод будет в формате, который ожидает ``python -m pip install``. "
"Общепринятой практикой является помещение этого списка в файл ``requirements."
"txt``:"

#: ../../tutorial/venv.rst:190
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the necessary "
"packages with ``install -r``:"
msgstr ""
"Файл ``requirements.txt`` может быть зафиксирован (committed) в "
"конфигурационном управлении  (version control) и тем самым поставляться как "
"часть приложения. Далее пользователь устанавливает все необходимые "
"приложению пакеты командой ``install -r``:"

#: ../../tutorial/venv.rst:207
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide "
"for complete documentation for ``pip``.  When you've written a package and "
"want to make it available on the Python Package Index, consult the `Python "
"packaging user guide`_."
msgstr ""
