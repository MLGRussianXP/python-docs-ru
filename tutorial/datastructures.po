# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kristina Mironova, 2021
# alex alev <alex.alev@bk.ru>, 2021
# Daniil Kolesnikov, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-02 15:40+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Daniil Kolesnikov, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/datastructures.rst:5
msgid "Data Structures"
msgstr "Структуры данных"

#: ../../tutorial/datastructures.rst:7
msgid ""
"This chapter describes some things you've learned about already in more "
"detail, and adds some new things as well."
msgstr ""
"Данная глава описывает некоторые вещи, которые вы уже изучили, более "
"детально, и добавляет кое-что новое."

#: ../../tutorial/datastructures.rst:13
msgid "More on Lists"
msgstr "Подробнее о списках"

#: ../../tutorial/datastructures.rst:15
msgid ""
"The list data type has some more methods.  Here are all of the methods of "
"list objects:"
msgstr ""
"Тип данных список имеет несколько больше методов. Здесь перечислены все "
"методы объекта список:"

#: ../../tutorial/datastructures.rst:22
msgid ""
"Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``."
msgstr "Добавление элемента в конец списка. Эквивалентно ``a[len(a):] = [x]``."

#: ../../tutorial/datastructures.rst:28
msgid ""
"Extend the list by appending all the items from the iterable.  Equivalent to "
"``a[len(a):] = iterable``."
msgstr ""
"Расширение списка добавление всех элементов итерируемого объекта. "
"Эквивалентно ``a[len(a):] = iterable``."

#: ../../tutorial/datastructures.rst:35
msgid ""
"Insert an item at a given position.  The first argument is the index of the "
"element before which to insert, so ``a.insert(0, x)`` inserts at the front "
"of the list, and ``a.insert(len(a), x)`` is equivalent to ``a.append(x)``."
msgstr ""
"Вставка элемента на определенную позицию. Первый аргумент это индекс "
"элемента, перед которым происходит вставка, таким образом ``a.insert(0, x)`` "
"поместит элемент в начало списка, а ``a.insert(len(a), x)`` эквивалентно  "
"``a.append(x)``."

#: ../../tutorial/datastructures.rst:43
msgid ""
"Remove the first item from the list whose value is equal to *x*.  It raises "
"a :exc:`ValueError` if there is no such item."
msgstr ""
"Удаление первого элемента списка, чье значение равно *x*.  Возбуждает :exc:"
"`ValueError` если такого элемента нет."

#: ../../tutorial/datastructures.rst:50
msgid ""
"Remove the item at the given position in the list, and return it.  If no "
"index is specified, ``a.pop()`` removes and returns the last item in the "
"list. It raises an :exc:`IndexError` if the list is empty or the index is "
"outside the list range."
msgstr ""

#: ../../tutorial/datastructures.rst:59
msgid "Remove all items from the list.  Equivalent to ``del a[:]``."
msgstr "Удаление всех элементов списка. Эквивалентно ``del a[:]``."

#: ../../tutorial/datastructures.rst:65
msgid ""
"Return zero-based index in the list of the first item whose value is equal "
"to *x*. Raises a :exc:`ValueError` if there is no such item."
msgstr ""
"Возвращает отсчитываемый от нуля индекс первого элемента списка, чье "
"значение равно *x*. Возбуждает :exc:`ValueError` если такого элемента нет."

#: ../../tutorial/datastructures.rst:68
msgid ""
"The optional arguments *start* and *end* are interpreted as in the slice "
"notation and are used to limit the search to a particular subsequence of the "
"list.  The returned index is computed relative to the beginning of the full "
"sequence rather than the *start* argument."
msgstr ""
"Необязательные аргументы *start* и *end* интерпретируются как в обозначении "
"среза и используются чтобы ограничить поиск конкретной "
"подпоследовательностью списка. Возвращаемый индекс рассчитывается "
"относительно начала полной последовательности, а не аргумента *start*."

#: ../../tutorial/datastructures.rst:77
msgid "Return the number of times *x* appears in the list."
msgstr "Возвращает количество раз, которое *x* появляется в списке."

#: ../../tutorial/datastructures.rst:83
msgid ""
"Sort the items of the list in place (the arguments can be used for sort "
"customization, see :func:`sorted` for their explanation)."
msgstr ""
"Сортировка элементов списка на месте (аргументы могут использоваться для "
"настройки сортировки, смотри :func:`sorted` для их пояснения)."

#: ../../tutorial/datastructures.rst:90
msgid "Reverse the elements of the list in place."
msgstr "Переворачивает элементы списка на месте."

#: ../../tutorial/datastructures.rst:96
msgid "Return a shallow copy of the list.  Equivalent to ``a[:]``."
msgstr "Возвращает уменьшенную копию списка. Эквивалентно ``a[:]``."

#: ../../tutorial/datastructures.rst:99
msgid "An example that uses most of the list methods::"
msgstr "Пример, который использует большиство методов списка::"

#: ../../tutorial/datastructures.rst:122
msgid ""
"You might have noticed that methods like ``insert``, ``remove`` or ``sort`` "
"that only modify the list have no return value printed -- they return the "
"default ``None``. [#]_  This is a design principle for all mutable data "
"structures in Python."
msgstr ""
"Вы могли заметить, что методы, как ``insert``, ``remove`` или ``sort``, "
"которые только изменяют список, не возвращают значений на экран - они "
"возвращают значение по умолчанию ``None``. [#]_  Это принцип работы для всех "
"изменяемых структур данных в Python."

#: ../../tutorial/datastructures.rst:127
msgid ""
"Another thing you might notice is that not all data can be sorted or "
"compared.  For instance, ``[None, 'hello', 10]`` doesn't sort because "
"integers can't be compared to strings and *None* can't be compared to other "
"types.  Also, there are some types that don't have a defined ordering "
"relation.  For example, ``3+4j < 5+7j`` isn't a valid comparison."
msgstr ""
"Другое, что вы можете заметить, это то, что не все данные могут быть "
"отсортированы или сравнены. Например, ``[None, 'hello', 10]`` не "
"сортируется, потому что целые числа не могут быть сравнены со строками, а "
"*None* не может быть сравнен с другими типами. Также есть некоторые типы, у "
"которых нет определенного порядка. Например, ``3+4j < 5+7j`` не является "
"верным сравнением."

#: ../../tutorial/datastructures.rst:138
msgid "Using Lists as Stacks"
msgstr "Использование списка в качестве стека"

#: ../../tutorial/datastructures.rst:143
msgid ""
"The list methods make it very easy to use a list as a stack, where the last "
"element added is the first element retrieved (\"last-in, first-out\").  To "
"add an item to the top of the stack, use :meth:`~list.append`.  To retrieve "
"an item from the top of the stack, use :meth:`~list.pop` without an explicit "
"index.  For example::"
msgstr ""
"Методы списка делают очень простым использование списка как стека, где "
"добавленный последний элемент это первый запрашиваемый  элемент (\"последним "
"пришел, первым ушел\"). Для добавления элемента в стек используйте :meth:"
"`~list.append`. Чтобы получить элемент с вершины стека, используйте :meth:"
"`~list.pop` без явного указания индекса. Например::"

#: ../../tutorial/datastructures.rst:168
msgid "Using Lists as Queues"
msgstr "Использование списка в качестве очереди"

#: ../../tutorial/datastructures.rst:172
msgid ""
"It is also possible to use a list as a queue, where the first element added "
"is the first element retrieved (\"first-in, first-out\"); however, lists are "
"not efficient for this purpose.  While appends and pops from the end of list "
"are fast, doing inserts or pops from the beginning of a list is slow "
"(because all of the other elements have to be shifted by one)."
msgstr ""
"Также возможно использование списка как очереди, где первый элемент "
"добавленный - это первый элемент запрашиваемый (\"первый пришел, первый "
"ушел\"); однако, списки неэффективны для таких целей. Хотя добавление и "
"получение элементов с конца списка быстрое, добавление или извлечение из "
"начала списка является медленным (потому что все остальные элементы должны "
"быть сдвинуты на один)."

#: ../../tutorial/datastructures.rst:178
msgid ""
"To implement a queue, use :class:`collections.deque` which was designed to "
"have fast appends and pops from both ends.  For example::"
msgstr ""
"Для реализации очереди, используйте :class:`collections.deque`, который "
"создан для быстрого добавления и извлечения элементов с обоих концов. "
"Например::"

#: ../../tutorial/datastructures.rst:196
msgid "List Comprehensions"
msgstr "Компоновка списка"

#: ../../tutorial/datastructures.rst:198
msgid ""
"List comprehensions provide a concise way to create lists. Common "
"applications are to make new lists where each element is the result of some "
"operations applied to each member of another sequence or iterable, or to "
"create a subsequence of those elements that satisfy a certain condition."
msgstr ""
"Компоновка списков предусматривает компактный способ создания списков. Общее "
"применение это создать новый список, где каждый элемент является результатом "
"некоторых операций, примененных к каждому члену другой последовательности "
"или итерируемого объекта, или создать подпоследовательность этих элементов, "
"которые удовлетворяют определенному условию."

#: ../../tutorial/datastructures.rst:203
msgid "For example, assume we want to create a list of squares, like::"
msgstr ""
"Например, предположим, мы хотим создать список из квадратов элементов, как::"

#: ../../tutorial/datastructures.rst:212
msgid ""
"Note that this creates (or overwrites) a variable named ``x`` that still "
"exists after the loop completes.  We can calculate the list of squares "
"without any side effects using::"
msgstr ""
"Обратите внимание, что создается (или перезаписывается) переменная ``x``, "
"которая продолжает существовать после того, как цикл завершится. Мы можем "
"рассчитать список квадратов без каких-либо побочных эффектов, используя::"

#: ../../tutorial/datastructures.rst:218
msgid "or, equivalently::"
msgstr "или, эквивалентно::"

#: ../../tutorial/datastructures.rst:222
msgid "which is more concise and readable."
msgstr "что выглядит более лаконично и читабельно."

#: ../../tutorial/datastructures.rst:224
msgid ""
"A list comprehension consists of brackets containing an expression followed "
"by a :keyword:`!for` clause, then zero or more :keyword:`!for` or :keyword:`!"
"if` clauses.  The result will be a new list resulting from evaluating the "
"expression in the context of the :keyword:`!for` and :keyword:`!if` clauses "
"which follow it. For example, this listcomp combines the elements of two "
"lists if they are not equal::"
msgstr ""
"Списковое включение состоит из скобок, содержащих выражение, за которым "
"следует фраза :keyword:`!for`, затем ноль или более фраз :keyword:`!for` "
"или :keyword:`!if`. Результатом будет новый список, полученный вычислением "
"выражения в контексте фраз :keyword:`!for` и :keyword:`!if`, следующих за "
"ним. Например, это списковое включение комбинирует элементы из двух списков, "
"если они не равны::"

#: ../../tutorial/datastructures.rst:234
msgid "and it's equivalent to::"
msgstr "и это эквивалетно::"

#: ../../tutorial/datastructures.rst:245
msgid ""
"Note how the order of the :keyword:`for` and :keyword:`if` statements is the "
"same in both these snippets."
msgstr ""
"Обратите внимание, что порядок ключевых слов :keyword:`for` и :keyword:`if` "
"выражения одинаковый для обоих фрагментов."

#: ../../tutorial/datastructures.rst:248
msgid ""
"If the expression is a tuple (e.g. the ``(x, y)`` in the previous example), "
"it must be parenthesized. ::"
msgstr ""
"Если выражение является кортежем (то есть ``(x, y)``, как в предыдущем "
"примере), оно должно заключаться в скобки. ::"

#: ../../tutorial/datastructures.rst:279
msgid ""
"List comprehensions can contain complex expressions and nested functions::"
msgstr ""
"Компоновка списка может содержать сложные выражения и вложенные функции::"

#: ../../tutorial/datastructures.rst:286
msgid "Nested List Comprehensions"
msgstr "Компоновка вложенных списков"

#: ../../tutorial/datastructures.rst:288
msgid ""
"The initial expression in a list comprehension can be any arbitrary "
"expression, including another list comprehension."
msgstr ""
"Исходным выражением компоновки может быть любое произвольное выражение, "
"включая другое списочное включение."

#: ../../tutorial/datastructures.rst:291
msgid ""
"Consider the following example of a 3x4 matrix implemented as a list of 3 "
"lists of length 4::"
msgstr ""
"Рассмотрим следующий пример матрицы 3x4, реализованной в виде списка из 3 "
"списков длины 4::"

#: ../../tutorial/datastructures.rst:300
msgid "The following list comprehension will transpose rows and columns::"
msgstr "Следующая компоновка списка транспонирует ряды и столбцы::"

#: ../../tutorial/datastructures.rst:305
msgid ""
"As we saw in the previous section, the inner list comprehension is evaluated "
"in the context of the :keyword:`for` that follows it, so this example is "
"equivalent to::"
msgstr ""
"Как мы видели в предыдущей секции, вложенное списковое включение вычисляется "
"для содержимого :keyword:`for`, которое за ним следует, и это эквивалентно::"

#: ../../tutorial/datastructures.rst:316
msgid "which, in turn, is the same as::"
msgstr "что, в свою очередь, тоже самое, что::"

#: ../../tutorial/datastructures.rst:329
msgid ""
"In the real world, you should prefer built-in functions to complex flow "
"statements. The :func:`zip` function would do a great job for this use case::"
msgstr ""
"В реальном мире вы должны предпочесть встроенные функции сложным операторам "
"потока. Функция :func:`zip` отлично подойдет для этого случая использования::"

#: ../../tutorial/datastructures.rst:335
msgid ""
"See :ref:`tut-unpacking-arguments` for details on the asterisk in this line."
msgstr ""
"Смотри :ref:`tut-unpacking-arguments` для информации о сноске в этой строке."

#: ../../tutorial/datastructures.rst:340
msgid "The :keyword:`!del` statement"
msgstr "Инструкция :keyword:`!del`"

#: ../../tutorial/datastructures.rst:342
msgid ""
"There is a way to remove an item from a list given its index instead of its "
"value: the :keyword:`del` statement.  This differs from the :meth:`~list."
"pop` method which returns a value.  The :keyword:`!del` statement can also "
"be used to remove slices from a list or clear the entire list (which we did "
"earlier by assignment of an empty list to the slice).  For example::"
msgstr ""
"Есть способ удалить элемент из списка по его индексу вместо значения: "
"инструкция :keyword:`del`. Это отличается от метода :meth:`~list.pop`, "
"который возвращает значение. Инструкция :keyword:`!del` также может "
"использоваться для удаления срезов из списка или очистки всего списка (что "
"мы сделали ранее, присвоив пустой список срезу). Например::"

#: ../../tutorial/datastructures.rst:359
msgid ":keyword:`del` can also be used to delete entire variables::"
msgstr ""
":keyword:`del` может также быть использовано для удаления целых переменных::"

#: ../../tutorial/datastructures.rst:363
msgid ""
"Referencing the name ``a`` hereafter is an error (at least until another "
"value is assigned to it).  We'll find other uses for :keyword:`del` later."
msgstr ""
"Ссылка на имя ``a`` в дальнейшем это ошибка (по крайней мере, пока ему не "
"будет присвоено другое значение). Мы найдем другие примеры использования :"
"keyword:`del` позже."

#: ../../tutorial/datastructures.rst:370
msgid "Tuples and Sequences"
msgstr "Кортежи и последовательности"

#: ../../tutorial/datastructures.rst:372
msgid ""
"We saw that lists and strings have many common properties, such as indexing "
"and slicing operations.  They are two examples of *sequence* data types "
"(see :ref:`typesseq`).  Since Python is an evolving language, other sequence "
"data types may be added.  There is also another standard sequence data type: "
"the *tuple*."
msgstr ""
"Мы видим, что списки и строки имеют много общих свойств, таких как "
"индексирование и срезы. Они представляют собой примеры типов данных "
"*последовательности* (смотри :ref:`typesseq`). Поскольку Python является "
"развивающимся языком, могут быть добавлены другие типы данных "
"последовательности. Существует также еще один стандартный тип данных "
"последовательности: *кортеж*."

#: ../../tutorial/datastructures.rst:378
msgid ""
"A tuple consists of a number of values separated by commas, for instance::"
msgstr "Кортеж состоит из числа переменных, разделенных запятой, например::"

#: ../../tutorial/datastructures.rst:400
msgid ""
"As you see, on output tuples are always enclosed in parentheses, so that "
"nested tuples are interpreted correctly; they may be input with or without "
"surrounding parentheses, although often parentheses are necessary anyway (if "
"the tuple is part of a larger expression).  It is not possible to assign to "
"the individual items of a tuple, however it is possible to create tuples "
"which contain mutable objects, such as lists."
msgstr ""
"Как видите, выходящий кортеж всегда заключен в скобки, поэтому вложенные "
"кортежи интерпретируются правильно; они могут быть введены с или без "
"окружающих скобок, хотя обычно скобки необходимы так или иначе (если кортеж "
"является частью большого выражения). Невозможно присвоить отдельный элемент "
"кортежа, однако возможно создавать кортежи, содержащие изменяемые объекты, "
"как списки."

#: ../../tutorial/datastructures.rst:407
msgid ""
"Though tuples may seem similar to lists, they are often used in different "
"situations and for different purposes. Tuples are :term:`immutable`, and "
"usually contain a heterogeneous sequence of elements that are accessed via "
"unpacking (see later in this section) or indexing (or even by attribute in "
"the case of :func:`namedtuples <collections.namedtuple>`). Lists are :term:"
"`mutable`, and their elements are usually homogeneous and are accessed by "
"iterating over the list."
msgstr ""
"Хотя кортежи могут выглядеть похожими на списки, они часто используются в "
"других ситуациях и для других целей. Кортежи :term:`immutable`, и обычно "
"содержат гетерогенную последовательность элементов, которая доступна через "
"распаковку(смотри дальше в этой секции) или индексацию  (или даже через "
"аттрибут в случае :func:`namedtuples <collections.namedtuple>`). Списки :"
"term:`mutable`, и их лементы обычно гомогенные и доступны через итерирование "
"по списку."

#: ../../tutorial/datastructures.rst:415
msgid ""
"A special problem is the construction of tuples containing 0 or 1 items: the "
"syntax has some extra quirks to accommodate these.  Empty tuples are "
"constructed by an empty pair of parentheses; a tuple with one item is "
"constructed by following a value with a comma (it is not sufficient to "
"enclose a single value in parentheses). Ugly, but effective.  For example::"
msgstr ""
"Особой проблемой является построение кортежей, содержащих 0 или 1 элемент: "
"синтаксис имеет некоторые дополнительные причуды, к которым нужно "
"привыкнуть. Пустые кортежи строятся пустой парой скобок; кортеж с одним "
"элементом строится, следуя за значением с запятой (недостаточно заключить "
"одно значение в скобки). Некрасиво, но эффективно. Например::"

#: ../../tutorial/datastructures.rst:430
msgid ""
"The statement ``t = 12345, 54321, 'hello!'`` is an example of *tuple "
"packing*: the values ``12345``, ``54321`` and ``'hello!'`` are packed "
"together in a tuple. The reverse operation is also possible::"
msgstr ""
"Выражение ``t = 12345, 54321, 'hello!'`` это пример  *запаковки кортежа*: "
"значения ``12345``, ``54321`` and ``'hello!'`` упакованы в кортеж. Обратная "
"операция тоже возможна::"

#: ../../tutorial/datastructures.rst:436
msgid ""
"This is called, appropriately enough, *sequence unpacking* and works for any "
"sequence on the right-hand side.  Sequence unpacking requires that there are "
"as many variables on the left side of the equals sign as there are elements "
"in the sequence.  Note that multiple assignment is really just a combination "
"of tuple packing and sequence unpacking."
msgstr ""
"Это называется, соответственно,  *распаковкой последовательности* и работает "
"для любой последовательности с правой стороны. Распаковка последовательности "
"требует, чтобы в левой части знака равенства было столько переменных, "
"сколько элементов в последовательности. Обратите внимание, что множественное "
"назначение - это просто комбинация упаковки кортежей и распаковки "
"последовательности."

#: ../../tutorial/datastructures.rst:446
msgid "Sets"
msgstr "Множества"

#: ../../tutorial/datastructures.rst:448
msgid ""
"Python also includes a data type for *sets*.  A set is an unordered "
"collection with no duplicate elements.  Basic uses include membership "
"testing and eliminating duplicate entries.  Set objects also support "
"mathematical operations like union, intersection, difference, and symmetric "
"difference."
msgstr ""
"Python также содержит тип данных для *множеств*. Множество это "
"неупорядоченная коллекция без повторяющихся элементов. Основные виды "
"использования включают тестирование членства и устранение дубликатов "
"записей. Объекты множеств также поддерживают математические операции, такие "
"как объединение, пересечение, разность и симметричная разность."

#: ../../tutorial/datastructures.rst:453
msgid ""
"Curly braces or the :func:`set` function can be used to create sets.  Note: "
"to create an empty set you have to use ``set()``, not ``{}``; the latter "
"creates an empty dictionary, a data structure that we discuss in the next "
"section."
msgstr ""
"Для создания множества могут быть использованы фигурные скобки или функция :"
"func:`set`. Примечание: чтобы создать пустой набор, вы должны использовать "
"``set()``, а не ``{}``; последний создает пустой словарь, структуру данных, "
"которую мы обсудим в следующем разделе."

#: ../../tutorial/datastructures.rst:457
msgid "Here is a brief demonstration::"
msgstr "Вот краткая демонстрация::"

#: ../../tutorial/datastructures.rst:482
msgid ""
"Similarly to :ref:`list comprehensions <tut-listcomps>`, set comprehensions "
"are also supported::"
msgstr ""
"Аналогично с компоновкой списка :ref:`list comprehensions <tut-listcomps>`, "
"компоновка множеств также поддерживается::"

#: ../../tutorial/datastructures.rst:493
msgid "Dictionaries"
msgstr "Словари"

#: ../../tutorial/datastructures.rst:495
msgid ""
"Another useful data type built into Python is the *dictionary* (see :ref:"
"`typesmapping`). Dictionaries are sometimes found in other languages as "
"\"associative memories\" or \"associative arrays\".  Unlike sequences, which "
"are indexed by a range of numbers, dictionaries are indexed by *keys*, which "
"can be any immutable type; strings and numbers can always be keys.  Tuples "
"can be used as keys if they contain only strings, numbers, or tuples; if a "
"tuple contains any mutable object either directly or indirectly, it cannot "
"be used as a key. You can't use lists as keys, since lists can be modified "
"in place using index assignments, slice assignments, or methods like :meth:"
"`~list.append` and :meth:`~list.extend`."
msgstr ""
"Другой полезной структурой данных, встроенной в Python, являются *словари* "
"(см. :ref:`typesmapping`). В других языках словари иногда можно встретить "
"как \"ассоциативную память\" или \"ассоциативные массивы\".  В отличие от "
"последовательностей, которые индексированы диапазоном чисел, словари "
"индексируются по *ключам*, которыми могут быть любые неизменяемые типы; "
"строки и числа всегда могут быть ключами. Кортежи могут быть ключами, только "
"если они содержат только строки, числа или кортежи; если кортеж содержит "
"любой изменяемый объект прямо или косвенно, он не может использоваться как "
"ключ. Вы не можете использовать списки в качестве ключей, так как списки "
"могут быть изменены на месте с помощью присваиваний индексов, присваиваний "
"срезов или таких методов, как :meth:`~list.append` и :meth:`~list.extend`."

#: ../../tutorial/datastructures.rst:506
msgid ""
"It is best to think of a dictionary as a set of *key: value* pairs, with the "
"requirement that the keys are unique (within one dictionary). A pair of "
"braces creates an empty dictionary: ``{}``. Placing a comma-separated list "
"of key:value pairs within the braces adds initial key:value pairs to the "
"dictionary; this is also the way dictionaries are written on output."
msgstr ""
"Лучше всего рассматривать словарь как неупорядоченное множество пар *ключ: "
"значение*, с требованием, чтобы ключи были уникальными (внутри одного "
"словаря). Пара скобок создает пустой словарь: ``{}``. Размещение "
"разделенного запятыми списка пар ключ:значение в фигурных скобках добавляет "
"в словарь начальные пары ключ:значение; это также способ отображения "
"словарей на выходе."

#: ../../tutorial/datastructures.rst:512
msgid ""
"The main operations on a dictionary are storing a value with some key and "
"extracting the value given the key.  It is also possible to delete a key:"
"value pair with ``del``. If you store using a key that is already in use, "
"the old value associated with that key is forgotten.  It is an error to "
"extract a value using a non-existent key."
msgstr ""
"Основные операции над словарями - это хранение значений с некоторым ключем и "
"извлечение значения по заданному ключу. Также возможно удалить пару ключ:"
"значение с помощью ``del``. Если вы сохраняете значение, используя уже "
"существующий ключ, старое значение, связанное с этим ключом, будет заменено "
"новым. Использование несуществующего ключа приведет к ошибке."

#: ../../tutorial/datastructures.rst:518
msgid ""
"Performing ``list(d)`` on a dictionary returns a list of all the keys used "
"in the dictionary, in insertion order (if you want it sorted, just use "
"``sorted(d)`` instead). To check whether a single key is in the dictionary, "
"use the :keyword:`in` keyword."
msgstr ""
"Выполнение ``list(d)`` на словаре возвращает список всех ключей, "
"используемых в словаре, в порядке добавления (если вы хотите его "
"отсортировать, просто используйте ``sorted(d)``). Чтобы проверить, находится "
"ли конкретный ключ в словаре, используйте ключевое слово :keyword:`in`."

#: ../../tutorial/datastructures.rst:523
msgid "Here is a small example using a dictionary::"
msgstr "Вот небольшой пример использования словаря::"

#: ../../tutorial/datastructures.rst:544
msgid ""
"The :func:`dict` constructor builds dictionaries directly from sequences of "
"key-value pairs::"
msgstr ""
"Конструктор :func:`dict` построит словарь прямо из последовательности пар "
"ключ-значение::"

#: ../../tutorial/datastructures.rst:550
msgid ""
"In addition, dict comprehensions can be used to create dictionaries from "
"arbitrary key and value expressions::"
msgstr ""
"В дополнение, для создания словарей может быть использована компоновка, "
"используя произвольные ключ и значение в выражении::"

#: ../../tutorial/datastructures.rst:556
msgid ""
"When the keys are simple strings, it is sometimes easier to specify pairs "
"using keyword arguments::"
msgstr ""
"Когда ключи являются обычными строками, иногда проще обозначить пары "
"используя ключевые аргументы::"

#: ../../tutorial/datastructures.rst:566
msgid "Looping Techniques"
msgstr "Техники зацикливания"

#: ../../tutorial/datastructures.rst:568
msgid ""
"When looping through dictionaries, the key and corresponding value can be "
"retrieved at the same time using the :meth:`~dict.items` method. ::"
msgstr ""
"При циклическом просмотре словарей ключ и соответствующее значение могут "
"быть получены одновременно с помощью метода :meth:`~dict.items`. ::"

#: ../../tutorial/datastructures.rst:578
msgid ""
"When looping through a sequence, the position index and corresponding value "
"can be retrieved at the same time using the :func:`enumerate` function. ::"
msgstr ""
"При циклическом прохождении последовательности индекс позиции и "
"соответствующее значение могут быть получены одновременно с помощью функции :"
"func:`enumerate` function. ::"

#: ../../tutorial/datastructures.rst:588
msgid ""
"To loop over two or more sequences at the same time, the entries can be "
"paired with the :func:`zip` function. ::"
msgstr ""
"Для перебора двух или более последовательностей одновременно, записи могут "
"быть сопоставлены с помощью функции :func:`zip`. ::"

#: ../../tutorial/datastructures.rst:600
msgid ""
"To loop over a sequence in reverse, first specify the sequence in a forward "
"direction and then call the :func:`reversed` function. ::"
msgstr ""
"Для перебора последовательности в обратном порядке сначала укажите "
"последовательность в прямом направлении, а затем вызовите функцию :func:"
"`reversed`. ::"

#: ../../tutorial/datastructures.rst:612
msgid ""
"To loop over a sequence in sorted order, use the :func:`sorted` function "
"which returns a new sorted list while leaving the source unaltered. ::"
msgstr ""
"Для перебора последовательности в отсортированном порядке используйте "
"функцию :func:`sorted`, которая возвращает новый отсортированный список, "
"оставляя исходную последовательность неизменной. ::"

#: ../../tutorial/datastructures.rst:626
msgid ""
"Using :func:`set` on a sequence eliminates duplicate elements. The use of :"
"func:`sorted` in combination with :func:`set` over a sequence is an "
"idiomatic way to loop over unique elements of the sequence in sorted "
"order. ::"
msgstr ""
"Использование :func:`set` в последовательности удаляет повторяющиеся "
"элементы. Использование :func:`sorted` в сочетании с :func:`set` над "
"последовательностью является идиоматическим способом обхода уникальных "
"элементов последовательности в отсортированном порядке. ::"

#: ../../tutorial/datastructures.rst:639
msgid ""
"It is sometimes tempting to change a list while you are looping over it; "
"however, it is often simpler and safer to create a new list instead. ::"
msgstr ""
"Иногда хочется изменить список во время его обхода; однако часто проще и "
"безопаснее вместо этого создать новый список. ::"

#: ../../tutorial/datastructures.rst:656
msgid "More on Conditions"
msgstr "Больше о условиях"

#: ../../tutorial/datastructures.rst:658
msgid ""
"The conditions used in ``while`` and ``if`` statements can contain any "
"operators, not just comparisons."
msgstr ""
"Условия, используемые в инструкциях ``while`` и ``if``, могут содержать "
"любые операторы, а не только сравнения."

#: ../../tutorial/datastructures.rst:662
msgid ""
"The comparison operators ``in`` and ``not in`` are membership tests that "
"determine whether a value is in (or not in) a container.  The operators "
"``is`` and ``is not`` compare whether two objects are really the same "
"object.  All comparison operators have the same priority, which is lower "
"than that of all numerical operators."
msgstr ""
"Операторы сравнения ``in`` и ``not in`` являются проверками принадлежности, "
"которые определяют, находится ли значение в (или не в) контейнере. Операторы "
"``is`` и ``is not`` сравнивают, являются ли два объекта действительно одним "
"и тем же объектом. Все операторы сравнения имеют одинаковый приоритет, "
"который ниже, чем у всех числовых операторов."

#: ../../tutorial/datastructures.rst:668
msgid ""
"Comparisons can be chained.  For example, ``a < b == c`` tests whether ``a`` "
"is less than ``b`` and moreover ``b`` equals ``c``."
msgstr ""
"Сравнения можно объединять в цепочки. Например, ``a < b == c`` проверяет, "
"является ли ``a`` меньше ``b`` и, кроме того, равно ли ``b`` ``c``."

#: ../../tutorial/datastructures.rst:671
msgid ""
"Comparisons may be combined using the Boolean operators ``and`` and ``or``, "
"and the outcome of a comparison (or of any other Boolean expression) may be "
"negated with ``not``.  These have lower priorities than comparison "
"operators; between them, ``not`` has the highest priority and ``or`` the "
"lowest, so that ``A and not B or C`` is equivalent to ``(A and (not B)) or "
"C``. As always, parentheses can be used to express the desired composition."
msgstr ""
"Сравнения могут быть объединены с использованием логических операторов "
"``and`` и ``or``, и результат сравнения (или любого другого логического "
"выражения) можно отрицать с помощью ``not``. Они имеют более низкий "
"приоритет, чем операторы сравнения; среди них ``not`` имеет наивысший "
"приоритет, а ``or`` - наименьший, так что ``A and not B or C`` эквивалентно "
"``(A and (not B)) or C``. Как всегда, скобки могут быть использованы для "
"выражения желаемой композиции."

#: ../../tutorial/datastructures.rst:678
msgid ""
"The Boolean operators ``and`` and ``or`` are so-called *short-circuit* "
"operators: their arguments are evaluated from left to right, and evaluation "
"stops as soon as the outcome is determined.  For example, if ``A`` and ``C`` "
"are true but ``B`` is false, ``A and B and C`` does not evaluate the "
"expression ``C``.  When used as a general value and not as a Boolean, the "
"return value of a short-circuit operator is the last evaluated argument."
msgstr ""

#: ../../tutorial/datastructures.rst:685
msgid ""
"It is possible to assign the result of a comparison or other Boolean "
"expression to a variable.  For example, ::"
msgstr ""

#: ../../tutorial/datastructures.rst:693
msgid ""
"Note that in Python, unlike C, assignment inside expressions must be done "
"explicitly with the :ref:`walrus operator <why-can-t-i-use-an-assignment-in-"
"an-expression>` ``:=``. This avoids a common class of problems encountered "
"in C programs: typing ``=`` in an expression when ``==`` was intended."
msgstr ""

#: ../../tutorial/datastructures.rst:703
msgid "Comparing Sequences and Other Types"
msgstr ""

#: ../../tutorial/datastructures.rst:704
msgid ""
"Sequence objects typically may be compared to other objects with the same "
"sequence type. The comparison uses *lexicographical* ordering: first the "
"first two items are compared, and if they differ this determines the outcome "
"of the comparison; if they are equal, the next two items are compared, and "
"so on, until either sequence is exhausted. If two items to be compared are "
"themselves sequences of the same type, the lexicographical comparison is "
"carried out recursively.  If all items of two sequences compare equal, the "
"sequences are considered equal. If one sequence is an initial sub-sequence "
"of the other, the shorter sequence is the smaller (lesser) one.  "
"Lexicographical ordering for strings uses the Unicode code point number to "
"order individual characters. Some examples of comparisons between sequences "
"of the same type::"
msgstr ""

#: ../../tutorial/datastructures.rst:724
msgid ""
"Note that comparing objects of different types with ``<`` or ``>`` is legal "
"provided that the objects have appropriate comparison methods.  For example, "
"mixed numeric types are compared according to their numeric value, so 0 "
"equals 0.0, etc.  Otherwise, rather than providing an arbitrary ordering, "
"the interpreter will raise a :exc:`TypeError` exception."
msgstr ""

#: ../../tutorial/datastructures.rst:732
msgid "Footnotes"
msgstr "Сноски"

#: ../../tutorial/datastructures.rst:733
msgid ""
"Other languages may return the mutated object, which allows method chaining, "
"such as ``d->insert(\"a\")->remove(\"b\")->sort();``."
msgstr ""
