# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniil Kolesnikov, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-19 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Daniil Kolesnikov, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "Интерактивное редактирование ввода и замена истории"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"Некоторые версии интерпретатора Python поддерживают редактирование текущей "
"входной строки и замену истории, аналогично возможностям в оболочке Korn и "
"оболочке GNU Bash. Это реализовано с использованием библиотеки `GNU "
"Readline`_, которая поддерживает различные стили редактирования. У этой "
"библиотеки есть собственная документация, которую мы не будем здесь "
"дублировать."

#: ../../tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Автодополнение и редактирование истории"

#: ../../tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`~object.__getattr__` method is part of the expression.  "
"The default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"Завершение имен переменных и модулей :ref:`включено автоматически "
"<rlcompleter-config>` при запуске интерпретатора, поэтому клавиша :kbd:`Tab` "
"вызывает функцию завершения; она просматривает имена инструкций Python, "
"текущие локальные переменные и доступные имена модулей. Для точечных "
"выражений, таких как ``string.a``, она вычисляет выражение до конечной "
"``'.'`` и затем предлагает варианты завершения из атрибутов полученного "
"объекта. Обратите внимание, что это может выполнить код, определенный в "
"приложении, если объект с методом :meth:`~object.__getattr__` является "
"частью выражения. Конфигурация по умолчанию также сохраняет вашу историю в "
"файл с именем :file:`.python_history` в вашем пользовательском каталоге. "
"История будет доступна в следующей интерактивной сессии интерпретатора."

#: ../../tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "Альтернативы интерактивному интерпретатору"

#: ../../tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"Этот объект представляет собой огромный шаг вперед по сравнению с "
"предыдущими версиями интерпретатора; однако остаются некоторые пожелания: "
"было бы хорошо, если бы предлагалось правильные отступы на продолжающихся "
"строках (парсер знает, требуется ли следующий токен отступа). Механизм "
"завершения может использовать таблицу символов интерпретатора. Команда для "
"проверки (или даже предложения) совпадающих скобок, кавычек и т. д. также "
"была бы полезной."

#: ../../tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"Один из альтернативных улучшенных интерактивных интерпретаторов, который "
"существует уже довольно долгое время, - IPython_, который имеет функции "
"автозаполнение, исследования объектов и продвинутого управления историей. Он "
"также может быть полностью настроен и встроен в другие приложения. Еще одна "
"похожая улучшенная интерактивная среда - bpython_."
