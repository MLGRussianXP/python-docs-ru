# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Dmitriy Q, 2021
# Daniil Kolesnikov, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-12 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 00:47+0000\n"
"Last-Translator: Daniil Kolesnikov, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Распределение объектов в куче"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Инициализирует заново выделенный объект *op* с его типом и изначальной "
"ссылкой. Возвращает инициализированный объект. Если *type* указывает на то, "
"что объект участвует в циклическом детекторе мусора, то он добавляется к "
"списку наблюдаемых детектором объектов. Остальные поля объекта остаются "
"незатронутыми."

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Делает все, что делает :c:func:`PyObject_Init`, а также инициализирует "
"информацию о длине для объекта переменного размера."

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized. The caller will own the only "
"reference to the object (i.e. its reference count will be one). The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"Выделяет  новый объект в Python используя C-структуру типа *TYPE* и объект "
"Python'a типа *typeobj* (``PyTypeObject*``). Поля не определённые в "
"заголовке объекта Python'a не инициализированы. Вызывающий будет владеть "
"только ссылкой на объект (т.е. счётчик ссылок на него будет равен одному). "
"Размер выделяемой памяти определяется в поле :c:member:`~PyTypeObject."
"tp_basicsize` объекта типа."

#: ../../c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``). Fields not defined by the "
"Python object header are not initialized.  The allocated memory allows for "
"the *TYPE* structure plus *size* (``Py_ssize_t``) fields of the size given "
"by the :c:member:`~PyTypeObject.tp_itemsize` field of *typeobj*.  This is "
"useful for implementing objects like tuples, which are able to determine "
"their size at construction time.  Embedding the array of fields into the "
"same allocation decreases the number of allocations, improving the memory "
"management efficiency."
msgstr ""
"Выделяет  новый объект в Python используя C-структуру типа *TYPE* и объект "
"Python'a типа *typeobj* (``PyTypeObject*``). Поля не определённые в "
"заголовке объекта Python'a не инициализированы. Выделенной памяти достаточно "
"для размещения структуры типа *TYPE* плюс *size* (``Py_ssize_t``) поля этого "
"размера указанного в поле :c:member:`~PyTypeObject.tp_itemsize` объекта "
"*typeobj*. Это может быть полезно для реализации объектов схожих с "
"\"кортежами\" (tuples), которые способны определять их собственный размер на "
"этапе создания. Внедрение массива полей в процесс выделения памяти для "
"объекта снижает общее количество выделений памяти, улучшая эффективность "
"распределения памяти."

#: ../../c-api/allocation.rst:57
msgid ""
"Releases memory allocated to an object using :c:macro:`PyObject_New` or :c:"
"macro:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
"Высвобождает память выделенную для объекта с использованием :c:macro:"
"`PyObject_New` или :c:macro:`PyObject_NewVar`. Вызывается обычно из "
"обработчика :c:member:`~PyTypeObject.tp_dealloc` указанного в типе объекта."

#: ../../c-api/allocation.rst:66
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Объект, который виден в Python как ``None``.  Доступ к которому следует "
"осуществлять с помощью макроса :c:macro:`Py_None`, который вычисляет "
"указатель на этот объект."

#: ../../c-api/allocation.rst:73
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:74
msgid "To allocate and create extension modules."
msgstr "Для выделения и создания модулей расширения."
