# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Kristina Mironova, 2021
# impo code, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-12 14:14+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: impo code, 2022\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/appetite.rst:5
msgid "Whetting Your Appetite"
msgstr "Разжигая ваш аппетит"

#: ../../tutorial/appetite.rst:7
msgid ""
"If you do much work on computers, eventually you find that there's some task "
"you'd like to automate.  For example, you may wish to perform a search-and-"
"replace over a large number of text files, or rename and rearrange a bunch "
"of photo files in a complicated way. Perhaps you'd like to write a small "
"custom database, or a specialized GUI application, or a simple game."
msgstr ""
"Если вы много работаете за компьютером, в конце концов вы обнаружите, что "
"есть задача, которую вы хотели бы автоматизировать. Например, вы можете "
"захотеть выполнить поиск и замену в большом количестве текстовых файлов или "
"переименовать и отсортировать группу файлов фотографий сложным образом. "
"Возможно, вы захотите написать небольшую пользовательскую базу данных, "
"специализированное приложение с графическим интерфейсом или простую игру."

#: ../../tutorial/appetite.rst:13
msgid ""
"If you're a professional software developer, you may have to work with "
"several C/C++/Java libraries but find the usual write/compile/test/re-"
"compile cycle is too slow.  Perhaps you're writing a test suite for such a "
"library and find writing the testing code a tedious task.  Or maybe you've "
"written a program that could use an extension language, and you don't want "
"to design and implement a whole new language for your application."
msgstr ""
"Если вы профессиональный разработчик программного обеспечения, вам, "
"возможно, придется работать с несколькими библиотеками C/C++/Java, но "
"обычный цикл записи/компиляции/тестирования/перекомпиляции окажется слишком "
"медленным. Возможно, вы пишете набор тестов для такой библиотеки и считаете "
"написание тестового кода утомительной задачей. Или, может быть, вы написали "
"программу, которая может использовать язык расширения, и вы не хотите "
"разрабатывать и реализовывать совершенно новый язык для своего приложения."

#: ../../tutorial/appetite.rst:20
msgid "Python is just the language for you."
msgstr "Python — язык, который вам подойдёт."

#: ../../tutorial/appetite.rst:22
msgid ""
"You could write a Unix shell script or Windows batch files for some of these "
"tasks, but shell scripts are best at moving around files and changing text "
"data, not well-suited for GUI applications or games. You could write a C/C++/"
"Java program, but it can take a lot of development time to get even a first-"
"draft program.  Python is simpler to use, available on Windows, macOS, and "
"Unix operating systems, and will help you get the job done more quickly."
msgstr ""
"Вы можете написать сценарий оболочки Unix или использовать пакетные файлы "
"Windows для некоторых из этих задач, но сценарии оболочки лучше всего "
"подходят для перемещения файлов и изменения текстовых данных, они плохо "
"подходят для приложений или игр с графическим интерфейсом. Вы можете "
"написать программу на C/C++/Java, но разработка даже первого черновика может "
"занять много времени. Python проще в использовании, доступен в операционных "
"системах Windows, macOS и Unix и поможет вам быстрее выполнить работу."

#: ../../tutorial/appetite.rst:29
msgid ""
"Python is simple to use, but it is a real programming language, offering "
"much more structure and support for large programs than shell scripts or "
"batch files can offer.  On the other hand, Python also offers much more "
"error checking than C, and, being a *very-high-level language*, it has high-"
"level data types built in, such as flexible arrays and dictionaries.  "
"Because of its more general data types Python is applicable to a much larger "
"problem domain than Awk or even Perl, yet many things are at least as easy "
"in Python as in those languages."
msgstr ""
"Python прост в использовании, но это настоящий язык программирования, "
"предлагающий гораздо больше структуры и поддержки для больших программ, чем "
"могут предложить сценарии оболочки или пакетные файлы. С другой стороны, "
"Python также предлагает гораздо больше проверок ошибок, чем C, и, будучи "
"*языком очень высокого уровня*, имеет встроенные типы данных высокого "
"уровня, такие как динамические массивы и словари. Из-за своих более общих "
"типов данных Python применим к гораздо более широкой проблемной области, чем "
"Awk или даже Perl, однако многие вещи в Python, по крайней мере, так же "
"просты, как и в этих языках."

#: ../../tutorial/appetite.rst:37
msgid ""
"Python allows you to split your program into modules that can be reused in "
"other Python programs.  It comes with a large collection of standard modules "
"that you can use as the basis of your programs --- or as examples to start "
"learning to program in Python.  Some of these modules provide things like "
"file I/O, system calls, sockets, and even interfaces to graphical user "
"interface toolkits like Tk."
msgstr ""
"Python позволяет разделить вашу программу на модули, которые можно повторно "
"использовать в других программах Python. Он поставляется с большой "
"коллекцией стандартных модулей, которые вы можете использовать в качестве "
"основы для своих программ или в качестве примеров для начала обучения "
"программированию на Python. Некоторые из этих модулей предоставляют такие "
"вещи, как файловый ввод-вывод, системные вызовы, сокеты и даже интерфейсы "
"для инструментов графического пользовательского интерфейса, таких как Tk."

#: ../../tutorial/appetite.rst:44
msgid ""
"Python is an interpreted language, which can save you considerable time "
"during program development because no compilation and linking is necessary.  "
"The interpreter can be used interactively, which makes it easy to experiment "
"with features of the language, to write throw-away programs, or to test "
"functions during bottom-up program development. It is also a handy desk "
"calculator."
msgstr ""
"Python — это интерпретируемый язык, который может значительно сэкономить "
"время при разработке программы, поскольку не требует компиляции и "
"компоновки. Интерпретатор можно использовать в интерактивном режиме, что "
"позволяет легко экспериментировать с функциями языка, писать одноразовые "
"программы или тестировать функции во время разработки программы снизу вверх. "
"И, кроме всего прочего — это удобный настольный калькулятор."

#: ../../tutorial/appetite.rst:50
msgid ""
"Python enables programs to be written compactly and readably.  Programs "
"written in Python are typically much shorter than equivalent C,  C++, or "
"Java programs, for several reasons:"
msgstr ""
"Python даёт возможность писать компактные и читабельные программы. "
"Программы, написанные на Python, обычно намного короче эквивалентных "
"программ на C, C++ или Java по нескольким причинам:"

#: ../../tutorial/appetite.rst:54
msgid ""
"the high-level data types allow you to express complex operations in a "
"single statement;"
msgstr ""
"типы данных высокого уровня позволяют вам выражать сложные операции в одной "
"инструкции;"

#: ../../tutorial/appetite.rst:57
msgid ""
"statement grouping is done by indentation instead of beginning and ending "
"brackets;"
msgstr ""
"группировка операторов осуществляется отступом, а не начальными и конечными "
"скобками;"

#: ../../tutorial/appetite.rst:60
msgid "no variable or argument declarations are necessary."
msgstr "объявления переменных или аргументов не требуются."

#: ../../tutorial/appetite.rst:62
msgid ""
"Python is *extensible*: if you know how to program in C it is easy to add a "
"new built-in function or module to the interpreter, either to perform "
"critical operations at maximum speed, or to link Python programs to "
"libraries that may only be available in binary form (such as a vendor-"
"specific graphics library). Once you are really hooked, you can link the "
"Python interpreter into an application written in C and use it as an "
"extension or command language for that application."
msgstr ""
"Python является *расширяемым*: если вы знаете, как программировать на C, "
"легко добавить новую встроенную функцию или модуль в интерпретатор, чтобы "
"выполнять важные операции с максимальной скоростью или связать программы "
"Python с библиотеками, которые могут быть доступны только в бинарной форме "
"(например, графическая библиотека конкретного поставщика). Как только вас "
"действительно зацепит, вы можете связать интерпретатор Python с приложением, "
"написанным на C, и использовать его в качестве расширения или командного "
"языка для этого приложения."

#: ../../tutorial/appetite.rst:70
msgid ""
"By the way, the language is named after the BBC show \"Monty Python's Flying "
"Circus\" and has nothing to do with reptiles.  Making references to Monty "
"Python skits in documentation is not only allowed, it is encouraged!"
msgstr ""
"Между прочим, язык назван в честь BBC шоу \"Летающий цирк Монти Пайтона\" и "
"не имеет ничего общего с рептилиями. Ссылки на скетчи Монти Пайтона в "
"документации не только разрешены, но и поощряются!"

#: ../../tutorial/appetite.rst:74
msgid ""
"Now that you are all excited about Python, you'll want to examine it in some "
"more detail.  Since the best way to learn a language is to use it, the "
"tutorial invites you to play with the Python interpreter as you read."
msgstr ""
"Теперь, когда вы в восторге от Python, вы захотите изучить его более "
"подробно. Поскольку лучший способ выучить язык - использовать его, учебник "
"предлагает вам играть с интерпретатором Python во время чтения."

#: ../../tutorial/appetite.rst:78
msgid ""
"In the next chapter, the mechanics of using the interpreter are explained.  "
"This is rather mundane information, but essential for trying out the "
"examples shown later."
msgstr ""
"В следующей главе мы объясним механику использования интерпретатора. Это "
"довольно обыденная информация, но необходимая, чтобы попробовать примеры, "
"показанные позже."

#: ../../tutorial/appetite.rst:82
msgid ""
"The rest of the tutorial introduces various features of the Python language "
"and system through examples, beginning with simple expressions, statements "
"and data types, through functions and modules, and finally touching upon "
"advanced concepts like exceptions and user-defined classes."
msgstr ""
"В остальной части учебника представлены различные функции языка и системы "
"Python на примерах, начиная с простых выражений, операторов и типов данных, "
"используя функции и модули, и, наконец, касаясь продвинутых понятий, таких "
"как исключения и пользовательские классы."
