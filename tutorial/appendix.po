# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Pavel Karateev <lancelote.du.lac@gmail.com>, 2021
# Kristina Mironova, 2021
# alex alev <alex.alev@bk.ru>, 2021
# myoldloverock, 2023
# Daniil Kolesnikov, 2024
# Roustam Khamidoulline, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-21 14:18+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Roustam Khamidoulline, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../tutorial/appendix.rst:5
msgid "Appendix"
msgstr "Приложение"

#: ../../tutorial/appendix.rst:11
msgid "Interactive Mode"
msgstr "Интерактивный режим"

#: ../../tutorial/appendix.rst:13
msgid ""
"There are two variants of the interactive :term:`REPL`.  The classic basic "
"interpreter is supported on all platforms with minimal line control "
"capabilities."
msgstr ""

#: ../../tutorial/appendix.rst:17
msgid ""
"On Windows, or Unix-like systems with :mod:`curses` support, a new "
"interactive shell is used by default. This one supports color, multiline "
"editing, history browsing, and paste mode.  To disable color, see "
":ref:`using-on-controlling-color` for details.  Function keys provide some "
"additional functionality. :kbd:`F1` enters the interactive help browser "
":mod:`pydoc`. :kbd:`F2` allows for browsing command-line history with "
"neither output nor the :term:`>>>` and :term:`...` prompts. :kbd:`F3` enters"
" \"paste mode\", which makes pasting larger blocks of code easier. Press "
":kbd:`F3` to return to the regular prompt."
msgstr ""

#: ../../tutorial/appendix.rst:28
msgid ""
"When using the new interactive shell, exit the shell by typing :kbd:`exit` "
"or :kbd:`quit`. Adding call parentheses after those commands is not "
"required."
msgstr ""

#: ../../tutorial/appendix.rst:32
msgid ""
"If the new interactive shell is not desired, it can be disabled via the "
":envvar:`PYTHON_BASIC_REPL` environment variable."
msgstr ""

#: ../../tutorial/appendix.rst:38
msgid "Error Handling"
msgstr "Обработка ошибок"

#: ../../tutorial/appendix.rst:40
msgid ""
"When an error occurs, the interpreter prints an error message and a stack "
"trace. In interactive mode, it then returns to the primary prompt; when "
"input came from a file, it exits with a nonzero exit status after printing "
"the stack trace. (Exceptions handled by an :keyword:`except` clause in a "
":keyword:`try` statement are not errors in this context.)  Some errors are "
"unconditionally fatal and cause an exit with a nonzero exit status; this "
"applies to internal inconsistencies and some cases of running out of memory."
"  All error messages are written to the standard error stream; normal output"
" from executed commands is written to standard output."
msgstr ""

#: ../../tutorial/appendix.rst:50
msgid ""
"Typing the interrupt character (usually :kbd:`Control-C` or :kbd:`Delete`) "
"to the primary or secondary prompt cancels the input and returns to the "
"primary prompt. [#]_ Typing an interrupt while a command is executing raises"
" the :exc:`KeyboardInterrupt` exception, which may be handled by a "
":keyword:`try` statement."
msgstr ""
"Ввод символа прерывания (обычно :kbd:`Control-C` или :kbd:`Delete`) в "
"основном или вторичном запросе отменяет ввод и возвращает к основному "
"запросу. [#]_ Ввод прерывания во время выполнения команды вызывает "
"исключение :exc:`KeyboardInterrupt`, которое может быть обработано "
"инструкцией :keyword:`try`."

#: ../../tutorial/appendix.rst:60
msgid "Executable Python Scripts"
msgstr "Исполняемые Python скрипты"

#: ../../tutorial/appendix.rst:62
msgid ""
"On BSD'ish Unix systems, Python scripts can be made directly executable, "
"like shell scripts, by putting the line ::"
msgstr ""
"На BSD-подобных Unix-системах скрипты Python могут быть сделаны "
"непосредственно исполняемыми, как скрипты командной оболочки, добавив строку"
" ::"

#: ../../tutorial/appendix.rst:65
msgid "#!/usr/bin/env python3"
msgstr ""

#: ../../tutorial/appendix.rst:67
msgid ""
"(assuming that the interpreter is on the user's :envvar:`PATH`) at the "
"beginning of the script and giving the file an executable mode.  The ``#!`` "
"must be the first two characters of the file.  On some platforms, this first"
" line must end with a Unix-style line ending (``'\\n'``), not a Windows "
"(``'\\r\\n'``) line ending.  Note that the hash, or pound, character, "
"``'#'``, is used to start a comment in Python."
msgstr ""
"(предполагается, что интерпретатор находится в :envvar:`PATH`) в начало "
"скрипта и дав файлу режим исполнения. ``#!`` должны быть первыми двумя "
"символами файла. На некоторых платформах первая строка должна заканчиваться "
"символом новой строки в стиле Unix (``'\\n'``), а не символом новой строки "
"Windows (``'\\r\\n'``). Обратите внимание, что символ хэша или решетки, "
"``'#'``, используется для начала комментария в Python."

#: ../../tutorial/appendix.rst:74
msgid ""
"The script can be given an executable mode, or permission, using the "
":program:`chmod` command."
msgstr ""
"Скрипту можно назначить режим исполнения или права доступа с помощью команды"
" :program:`chmod`."

#: ../../tutorial/appendix.rst:77
msgid "$ chmod +x myscript.py"
msgstr ""

#: ../../tutorial/appendix.rst:81
msgid ""
"On Windows systems, there is no notion of an \"executable mode\".  The "
"Python installer automatically associates ``.py`` files with ``python.exe`` "
"so that a double-click on a Python file will run it as a script.  The "
"extension can also be ``.pyw``, in that case, the console window that "
"normally appears is suppressed."
msgstr ""
"На системах Windows нет понятия \"режима исполнения\". Установщик Python "
"автоматически ассоциирует файлы с расширением ``.py`` с ``python.exe``, так "
"что двойной щелчок по файлу Python запустит его как скрипт. Расширение также"
" может быть ``.pyw``, в этом случае окно консоли, которое обычно появляется,"
" будет скрыто."

#: ../../tutorial/appendix.rst:91
msgid "The Interactive Startup File"
msgstr ""

#: ../../tutorial/appendix.rst:93
msgid ""
"When you use Python interactively, it is frequently handy to have some "
"standard commands executed every time the interpreter is started.  You can "
"do this by setting an environment variable named :envvar:`PYTHONSTARTUP` to "
"the name of a file containing your start-up commands.  This is similar to "
"the :file:`.profile` feature of the Unix shells."
msgstr ""

#: ../../tutorial/appendix.rst:99
msgid ""
"This file is only read in interactive sessions, not when Python reads "
"commands from a script, and not when :file:`/dev/tty` is given as the "
"explicit source of commands (which otherwise behaves like an interactive "
"session).  It is executed in the same namespace where interactive commands "
"are executed, so that objects that it defines or imports can be used without"
" qualification in the interactive session. You can also change the prompts "
"``sys.ps1`` and ``sys.ps2`` in this file."
msgstr ""

#: ../../tutorial/appendix.rst:107
msgid ""
"If you want to read an additional start-up file from the current directory, "
"you can program this in the global start-up file using code like ``if "
"os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read())``. If you "
"want to use the startup file in a script, you must do this explicitly in the"
" script::"
msgstr ""

#: ../../tutorial/appendix.rst:113
msgid ""
"import os\n"
"filename = os.environ.get('PYTHONSTARTUP')\n"
"if filename and os.path.isfile(filename):\n"
"    with open(filename) as fobj:\n"
"        startup_file = fobj.read()\n"
"    exec(startup_file)"
msgstr ""

#: ../../tutorial/appendix.rst:124
msgid "The Customization Modules"
msgstr ""

#: ../../tutorial/appendix.rst:126
msgid ""
"Python provides two hooks to let you customize it: :index:`sitecustomize` "
"and :index:`usercustomize`.  To see how it works, you need first to find the"
" location of your user site-packages directory.  Start Python and run this "
"code::"
msgstr ""

#: ../../tutorial/appendix.rst:130
msgid ""
">>> import site\n"
">>> site.getusersitepackages()\n"
"'/home/user/.local/lib/python3.x/site-packages'"
msgstr ""

#: ../../tutorial/appendix.rst:134
msgid ""
"Now you can create a file named :file:`usercustomize.py` in that directory "
"and put anything you want in it.  It will affect every invocation of Python,"
" unless it is started with the :option:`-s` option to disable the automatic "
"import."
msgstr ""

#: ../../tutorial/appendix.rst:138
msgid ""
":index:`sitecustomize` works in the same way, but is typically created by an"
" administrator of the computer in the global site-packages directory, and is"
" imported before :index:`usercustomize`.  See the documentation of the "
":mod:`site` module for more details."
msgstr ""

#: ../../tutorial/appendix.rst:145
msgid "Footnotes"
msgstr ""

#: ../../tutorial/appendix.rst:146
msgid "A problem with the GNU Readline package may prevent this."
msgstr ""
