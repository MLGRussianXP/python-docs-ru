# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# alex alev <alex.alev@bk.ru>, 2021
# Kristina Mironova, 2021
# Влад Табаков <vl.tab.kov@gmail.com>, 2021
# Daniil Kolesnikov, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-01 14:13+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Daniil Kolesnikov, 2024\n"
"Language-Team: Russian (https://app.transifex.com/python-doc/teams/5390/"
"ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || "
"(n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr "Встроенные функции"

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""
"Интерпретатор Python имеет ряд встроенных функций и типов, которые доступны "
"всегда. Они перечислены здесь в алфавитном порядке."

#: ../../library/functions.rst:0
msgid "**A**"
msgstr "**A**"

#: ../../library/functions.rst:0
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/functions.rst:0
msgid ":func:`aiter`"
msgstr ":func:`aiter`"

#: ../../library/functions.rst:0
msgid ":func:`all`"
msgstr ":func:`all`"

#: ../../library/functions.rst:0
msgid ":func:`anext`"
msgstr ":func:`anext`"

#: ../../library/functions.rst:0
msgid ":func:`any`"
msgstr ":func:`any`"

#: ../../library/functions.rst:0
msgid ":func:`ascii`"
msgstr ":func:`ascii`"

#: ../../library/functions.rst:0
msgid "**B**"
msgstr "**B**"

#: ../../library/functions.rst:0
msgid ":func:`bin`"
msgstr ":func:`bin`"

#: ../../library/functions.rst:0
msgid ":func:`bool`"
msgstr ":func:`bool`"

#: ../../library/functions.rst:0
msgid ":func:`breakpoint`"
msgstr ":func:`breakpoint`"

#: ../../library/functions.rst:0
msgid "|func-bytearray|_"
msgstr "|func-bytearray|_"

#: ../../library/functions.rst:0
msgid "|func-bytes|_"
msgstr "|func-bytes|_"

#: ../../library/functions.rst:0
msgid "**C**"
msgstr "**C**"

#: ../../library/functions.rst:0
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: ../../library/functions.rst:0
msgid ":func:`chr`"
msgstr ":func:`chr`"

#: ../../library/functions.rst:0
msgid ":func:`classmethod`"
msgstr ":func:`classmethod`"

#: ../../library/functions.rst:0
msgid ":func:`compile`"
msgstr ":func:`compile`"

#: ../../library/functions.rst:0
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/functions.rst:0
msgid "**D**"
msgstr "**D**"

#: ../../library/functions.rst:0
msgid ":func:`delattr`"
msgstr ":func:`delattr`"

#: ../../library/functions.rst:0
msgid "|func-dict|_"
msgstr "|func-dict|_"

#: ../../library/functions.rst:0
msgid ":func:`dir`"
msgstr ":func:`dir`"

#: ../../library/functions.rst:0
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/functions.rst:0
msgid "**E**"
msgstr "**E**"

#: ../../library/functions.rst:0
msgid ":func:`enumerate`"
msgstr ":func:`enumerate`"

#: ../../library/functions.rst:0
msgid ":func:`eval`"
msgstr ":func:`eval`"

#: ../../library/functions.rst:0
msgid ":func:`exec`"
msgstr ":func:`exec`"

#: ../../library/functions.rst:0
msgid "**F**"
msgstr "**F**"

#: ../../library/functions.rst:0
msgid ":func:`filter`"
msgstr ":func:`filter`"

#: ../../library/functions.rst:0
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/functions.rst:0
msgid ":func:`format`"
msgstr ":func:`format`"

#: ../../library/functions.rst:0
msgid "|func-frozenset|_"
msgstr "|func-frozenset|_"

#: ../../library/functions.rst:0
msgid "**G**"
msgstr "**G**"

#: ../../library/functions.rst:0
msgid ":func:`getattr`"
msgstr ":func:`getattr`"

#: ../../library/functions.rst:0
msgid ":func:`globals`"
msgstr ":func:`globals`"

#: ../../library/functions.rst:0
msgid "**H**"
msgstr "**H**"

#: ../../library/functions.rst:0
msgid ":func:`hasattr`"
msgstr ":func:`hasattr`"

#: ../../library/functions.rst:0
msgid ":func:`hash`"
msgstr ":func:`hash`"

#: ../../library/functions.rst:0
msgid ":func:`help`"
msgstr ":func:`help`"

#: ../../library/functions.rst:0
msgid ":func:`hex`"
msgstr ":func:`hex`"

#: ../../library/functions.rst:0
msgid "**I**"
msgstr "**I**"

#: ../../library/functions.rst:0
msgid ":func:`id`"
msgstr ":func:`id`"

#: ../../library/functions.rst:0
msgid ":func:`input`"
msgstr ":func:`input`"

#: ../../library/functions.rst:0
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/functions.rst:0
msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

#: ../../library/functions.rst:0
msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

#: ../../library/functions.rst:0
msgid ":func:`iter`"
msgstr ":func:`iter`"

#: ../../library/functions.rst:0
msgid "**L**"
msgstr "**L**"

#: ../../library/functions.rst:0
msgid ":func:`len`"
msgstr ":func:`len`"

#: ../../library/functions.rst:0
msgid "|func-list|_"
msgstr "|func-list|_"

#: ../../library/functions.rst:0
msgid ":func:`locals`"
msgstr ":func:`locals`"

#: ../../library/functions.rst:0
msgid "**M**"
msgstr "**M**"

#: ../../library/functions.rst:0
msgid ":func:`map`"
msgstr ":func:`map`"

#: ../../library/functions.rst:0
msgid ":func:`max`"
msgstr ":func:`max`"

#: ../../library/functions.rst:0
msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

#: ../../library/functions.rst:0
msgid ":func:`min`"
msgstr ":func:`min`"

#: ../../library/functions.rst:0
msgid "**N**"
msgstr "**N**"

#: ../../library/functions.rst:0
msgid ":func:`next`"
msgstr ":func:`next`"

#: ../../library/functions.rst:0
msgid "**O**"
msgstr "**O**"

#: ../../library/functions.rst:0
msgid ":func:`object`"
msgstr ":func:`object`"

#: ../../library/functions.rst:0
msgid ":func:`oct`"
msgstr ":func:`oct`"

#: ../../library/functions.rst:0
msgid ":func:`open`"
msgstr ":func:`open`"

#: ../../library/functions.rst:0
msgid ":func:`ord`"
msgstr ":func:`ord`"

#: ../../library/functions.rst:0
msgid "**P**"
msgstr "**P**"

#: ../../library/functions.rst:0
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/functions.rst:0
msgid ":func:`print`"
msgstr ":func:`print`"

#: ../../library/functions.rst:0
msgid ":func:`property`"
msgstr ":func:`property`"

#: ../../library/functions.rst:0
msgid "**R**"
msgstr "**R**"

#: ../../library/functions.rst:0
msgid "|func-range|_"
msgstr "|func-range|_"

#: ../../library/functions.rst:0
msgid ":func:`repr`"
msgstr ":func:`repr`"

#: ../../library/functions.rst:0
msgid ":func:`reversed`"
msgstr ":func:`reversed`"

#: ../../library/functions.rst:0
msgid ":func:`round`"
msgstr ":func:`round`"

#: ../../library/functions.rst:0
msgid "**S**"
msgstr "**S**"

#: ../../library/functions.rst:0
msgid "|func-set|_"
msgstr "|func-set|_"

#: ../../library/functions.rst:0
msgid ":func:`setattr`"
msgstr ":func:`setattr`"

#: ../../library/functions.rst:0
msgid ":func:`slice`"
msgstr ":func:`slice`"

#: ../../library/functions.rst:0
msgid ":func:`sorted`"
msgstr ":func:`sorted`"

#: ../../library/functions.rst:0
msgid ":func:`staticmethod`"
msgstr ":func:`staticmethod`"

#: ../../library/functions.rst:0
msgid "|func-str|_"
msgstr "|func-str|_"

#: ../../library/functions.rst:0
msgid ":func:`sum`"
msgstr ":func:`sum`"

#: ../../library/functions.rst:0
msgid ":func:`super`"
msgstr ":func:`super`"

#: ../../library/functions.rst:0
msgid "**T**"
msgstr "**T**"

#: ../../library/functions.rst:0
msgid "|func-tuple|_"
msgstr "|func-tuple|_"

#: ../../library/functions.rst:0
msgid ":func:`type`"
msgstr ":func:`type`"

#: ../../library/functions.rst:0
msgid "**V**"
msgstr "**V**"

#: ../../library/functions.rst:0
msgid ":func:`vars`"
msgstr ":func:`vars`"

#: ../../library/functions.rst:0
msgid "**Z**"
msgstr "**Z**"

#: ../../library/functions.rst:0
msgid ":func:`zip`"
msgstr ":func:`zip`"

#: ../../library/functions.rst:0
msgid "**_**"
msgstr "**_**"

#: ../../library/functions.rst:0
msgid ":func:`__import__`"
msgstr ":func:`__import__`"

#: ../../library/functions.rst:59
msgid ""
"Return the absolute value of a number.  The argument may be an integer, a "
"floating point number, or an object implementing :meth:`~object.__abs__`. If "
"the argument is a complex number, its magnitude is returned."
msgstr ""
"Возвращает абсолютное значение числа. Аргументом может быть целое число, "
"число с плавающей точкой или объект, реализующий :meth:`~object.__abs__`. "
"Если аргумент является комплексным числом, возвращается его модуль."

#: ../../library/functions.rst:67
msgid ""
"Return an :term:`asynchronous iterator` for an :term:`asynchronous "
"iterable`. Equivalent to calling ``x.__aiter__()``."
msgstr ""
"Возвращает :term:`asynchronous iterator` для :term:`asynchronous iterable`. "
"Эквивалент вызова ``x.__aiter__()``."

#: ../../library/functions.rst:70
msgid "Note: Unlike :func:`iter`, :func:`aiter` has no 2-argument variant."
msgstr ""
"Примечание: В отличие от :func:`iter`, у :func:`aiter` нет варианта с двумя "
"аргументами."

#: ../../library/functions.rst:76
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"Возвращает ``True``, если все элементы *iterable* истинны (или если "
"итерируемый объект пуст). Эквивалентно::"

#: ../../library/functions.rst:89
msgid ""
"When awaited, return the next item from the given :term:`asynchronous "
"iterator`, or *default* if given and the iterator is exhausted."
msgstr ""
"При использовании await, возвращается следующий элемент из заданного :term:"
"`asynchronous iterator`, или *default*, если он задан и итератор исчерпан."

#: ../../library/functions.rst:92
msgid ""
"This is the async variant of the :func:`next` builtin, and behaves similarly."
msgstr ""
"Это асинхронный вариант встроенной функции :func:`next`, и ведёт себя "
"аналогично."

#: ../../library/functions.rst:95
msgid ""
"This calls the :meth:`~object.__anext__` method of *async_iterator*, "
"returning an :term:`awaitable`. Awaiting this returns the next value of the "
"iterator. If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopAsyncIteration` is raised."
msgstr ""
"Это вызывает метод :meth:`~object.__anext__` *async_iterator*, возвращая :"
"term:`awaitable`. Использование await возвращает следующее значение "
"итератора. Если *default* задан, то он возвращается, если итератор исчерпан, "
"в противном случае возбуждается исключение :exc:`StopAsyncIteration`."

#: ../../library/functions.rst:104
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"Возвращает ``True``, если любой элемент *итерируемого объекта* истинный. "
"Если итерируемый объект пуст, возвращает ``False``. Эквивалентно::"

#: ../../library/functions.rst:116
msgid ""
"As :func:`repr`, return a string containing a printable representation of an "
"object, but escape the non-ASCII characters in the string returned by :func:"
"`repr` using ``\\x``, ``\\u``, or ``\\U`` escapes.  This generates a string "
"similar to that returned by :func:`repr` in Python 2."
msgstr ""
"Как :func:`repr`, возвращает строку, содержащую печатное представление "
"объекта, но экранирует не-ASCII символы в строке, возвращаемой :func:`repr`, "
"используя экранирование ``\\x``, ``\\u`` или ``\\U`` . Это генерирует "
"строку, аналогичную той, которую возвращает :func:`repr` в Python 2."

#: ../../library/functions.rst:124
msgid ""
"Convert an integer number to a binary string prefixed with \"0b\". The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`~object.__index__` method that returns an "
"integer. Some examples:"
msgstr ""
"Преобразует целое число в двоичную строку с префиксом \"0b\". Результат "
"является допустимым выражением Python. Если *x* не является объектом Python :"
"class:`int`, он должен определить метод :meth:`~object.__index__`, который "
"возвращает целое число. Некоторые примеры:"

#: ../../library/functions.rst:134
msgid ""
"If the prefix \"0b\" is desired or not, you can use either of the following "
"ways."
msgstr ""
"В зависимости от необходимости префикса \"0b\", вы можете использовать любой "
"из следующих способов."

#: ../../library/functions.rst:141 ../../library/functions.rst:845
#: ../../library/functions.rst:1163
msgid "See also :func:`format` for more information."
msgstr "См. также :func:`format` для получения дополнительной информации."

#: ../../library/functions.rst:146
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted "
"using the standard :ref:`truth testing procedure <truth>`.  If *x* is false "
"or omitted, this returns ``False``; otherwise, it returns ``True``.  The :"
"class:`bool` class is a subclass of :class:`int` (see :ref:`typesnumeric`). "
"It cannot be subclassed further.  Its only instances are ``False`` and "
"``True`` (see :ref:`typebool`)."
msgstr ""
"Возвращает Логическое значение, т. е. одно из ``True`` или ``False``.  *x* "
"преобразуется с использованием стандартной :ref:`truth testing procedure "
"<truth>`.  Если *x* ложно или опущено, возвращается ``False``; в противном "
"случае возвращается ``True``.  Класс :class:`bool` является подклассом :"
"class:`int` (см. :ref:`typesnumeric`). Он не может быть наследован дальше. "
"Его единственные экземпляры - ``False`` и ``True`` (см. :ref:`typebool`)."

#: ../../library/functions.rst:155 ../../library/functions.rst:710
#: ../../library/functions.rst:934
msgid "*x* is now a positional-only parameter."
msgstr "*x* теперь является только-позиционным параметром."

#: ../../library/functions.rst:160
msgid ""
"This function drops you into the debugger at the call site.  Specifically, "
"it calls :func:`sys.breakpointhook`, passing ``args`` and ``kws`` straight "
"through.  By default, ``sys.breakpointhook()`` calls :func:`pdb.set_trace()` "
"expecting no arguments.  In this case, it is purely a convenience function "
"so you don't have to explicitly import :mod:`pdb` or type as much code to "
"enter the debugger.  However, :func:`sys.breakpointhook` can be set to some "
"other function and :func:`breakpoint` will automatically call that, allowing "
"you to drop into the debugger of choice. If :func:`sys.breakpointhook` is "
"not accessible, this function will raise :exc:`RuntimeError`."
msgstr ""
"Эта функция помещает вас в отладчик на месте вызова. Конкретно, она "
"вызывает :func:`sys.breakpointhook`, передавая ``args`` и ``kws`` напрямую. "
"По умолчанию ``sys.breakpointhook()`` вызывает :func:`pdb.set_trace()` без "
"аргументов. В этом случае это просто функция удобства, чтобы вам не нужно "
"было явно импортировать :mod:`pdb` или печатать много кода для входа в "
"отладчик. Однако :func:`sys.breakpointhook` может быть установлена на другую "
"функцию, и :func:`breakpoint` автоматически вызовет ее, позволяя вам попасть "
"в отладчик по выбору. Если :func:`sys.breakpointhook` недоступна, эта "
"функция возбудит :exc:`RuntimeError`."

#: ../../library/functions.rst:172
msgid ""
"By default, the behavior of :func:`breakpoint` can be changed with the :"
"envvar:`PYTHONBREAKPOINT` environment variable. See :func:`sys."
"breakpointhook` for usage details."
msgstr ""
"По умолчанию поведение функции :func:`breakpoint` может быть изменено с "
"помощью переменной окружения :envvar:`PYTHONBREAKPOINT`. См. детали "
"использования в :func:`sys.breakpointhook`."

#: ../../library/functions.rst:176
msgid ""
"Note that this is not guaranteed if :func:`sys.breakpointhook` has been "
"replaced."
msgstr ""
"Обратите внимание, что это не гарантируется, если :func:`sys.breakpointhook` "
"был заменен."

#: ../../library/functions.rst:179
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.breakpoint`` with "
"argument ``breakpointhook``."
msgstr ""
"Возбуждает событие аудита ``builtins.breakpoint`` с аргументом "
"``breakpointhook``."

#: ../../library/functions.rst:189
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""
"Возвращает новый массив байтов. Класс :class:`bytearray` является изменяемой "
"последовательностью целых чисел в диапазоне 0 <= x < 256. Он имеет "
"большинство обычных методов изменяемых последовательностей, описанных в :ref:"
"`typesseq-mutable`, а также большинство методов, которые имеет тип :class:"
"`bytes`, см. :ref:`bytes-methods`."

#: ../../library/functions.rst:194
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""
"Необязательный параметр *source* может быть использован для инициализации "
"массива несколькими различными способами:"

#: ../../library/functions.rst:197
msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""
"Если это *строка*, вы также должны указать параметры *encoding* (и, при "
"необходимости, *errors*); :func:`bytearray` затем преобразует строку в байты "
"с использованием :meth:`str.encode`."

#: ../../library/functions.rst:201
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""
"Если это *целое число*, массив будет иметь такой размер и будет "
"инициализирован нулевыми байтами."

#: ../../library/functions.rst:204
msgid ""
"If it is an object conforming to the :ref:`buffer interface "
"<bufferobjects>`, a read-only buffer of the object will be used to "
"initialize the bytes array."
msgstr ""
"Если это объект, соответствующий :ref:`интерфейсу буфера <bufferobjects>`, "
"будет использован только-для-чтения буфер объекта для инициализации массива "
"байтов."

#: ../../library/functions.rst:207
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"Если это *итерируемый объект*, он должен быть итерируемым объектом целых "
"чисел в диапазоне ``0 <= x < 256``, которые используются в качестве "
"начального содержимого массива."

#: ../../library/functions.rst:210
msgid "Without an argument, an array of size 0 is created."
msgstr "Без аргумента создается массив размером 0."

#: ../../library/functions.rst:212
msgid "See also :ref:`binaryseq` and :ref:`typebytearray`."
msgstr "Смотрите также ref:`binaryseq` и :ref:`typebytearray`"

#: ../../library/functions.rst:221
msgid ""
"Return a new \"bytes\" object which is an immutable sequence of integers in "
"the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :"
"class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""
"Возвращает новый объект \"bytes\", который является неизменяемой "
"последовательностью целых чисел в диапазоне ``0 <= x < 256``. :class:`bytes` "
"- это неизменяемая версия :class:`bytearray` - у него есть те же "
"неизменяемые методы и то же поведение индексирования и срезов."

#: ../../library/functions.rst:226
msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr ""
"Соответственно, аргументы конструктора интерпретируются так же, как и для :"
"func:`bytearray`."

#: ../../library/functions.rst:228
msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr ""
"Объекты байтов также могут быть созданы с помощью литералов, см. :ref:"
"`strings`."

#: ../../library/functions.rst:230
msgid "See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`."
msgstr "См. также :ref:`binaryseq`, :ref:`typebytes` и :ref:`bytes-methods`."

#: ../../library/functions.rst:235
msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns ``True``, it is still possible that a call "
"fails, but if it is ``False``, calling *object* will never succeed. Note "
"that classes are callable (calling a class returns a new instance); "
"instances are callable if their class has a :meth:`~object.__call__` method."
msgstr ""
"Возвращает :const:`True`, если аргумент *object* является вызываемым, :const:"
"`False`, если нет. Если это возвращает ``True``, все равно возможно, что "
"вызов завершится неудачей, но если это ``False``, вызов *object* никогда не "
"будет успешным. Обратите внимание, что классы являются вызываемыми (вызов "
"класса возвращает новый экземпляр); экземпляры являются вызываемыми, если их "
"класс имеет метод :meth:`~object.__call__`."

#: ../../library/functions.rst:241
msgid ""
"This function was first removed in Python 3.0 and then brought back in "
"Python 3.2."
msgstr ""
"Эта функция была впервые удалена в Python 3.0, а затем восстановлена в "
"Python 3.2."

#: ../../library/functions.rst:248
msgid ""
"Return the string representing a character whose Unicode code point is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``, while "
"``chr(8364)`` returns the string ``'€'``. This is the inverse of :func:`ord`."
msgstr ""
"Возвращает строку, представляющую символ, чей кодовый номер Юникода является "
"целым числом *i*. Например, ``chr(97)`` возвращает строку ``'a'``, в то "
"время как ``chr(8364)`` возвращает строку ``'€'``. Это обратное действие к :"
"func:`ord`."

#: ../../library/functions.rst:252
msgid ""
"The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in "
"base 16).  :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""
"Допустимый диапазон для аргумента составляет от 0 до 1,114,111 (0x10FFFF в "
"шестнадцатеричной системе). :exc:`ValueError` будет возбуждено, если *i* "
"находится за пределами этого диапазона."

#: ../../library/functions.rst:258
msgid "Transform a method into a class method."
msgstr "Преобразует метод в метод класса."

#: ../../library/functions.rst:260
msgid ""
"A class method receives the class as an implicit first argument, just like "
"an instance method receives the instance. To declare a class method, use "
"this idiom::"
msgstr ""
"Метод класса получает класс в качестве неявного первого аргумента, так же "
"как экземпляр метода получает экземпляр. Чтобы объявить метод класса, "
"используйте эту идиому::"

#: ../../library/functions.rst:268
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"Проявление ``@classmethod`` является :term:`декоратором` функции -- см. :ref:"
"`function` для подробностей."

#: ../../library/functions.rst:271
msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""
"Метод класса может быть вызван либо на самом классе (например, ``C.f()``), "
"либо на экземпляре класса (например, ``C().f()``). Экземпляр игнорируется, "
"за исключением его класса. Если метод класса вызывается для производного "
"класса, объект производного класса передается как неявный первый аргумент."

#: ../../library/functions.rst:276
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section. For more information on "
"class methods, see :ref:`types`."
msgstr ""
"Методы класса отличаются от статических методов C++ или Java. Если вам нужны "
"последние, см. :func:`staticmethod` в этом разделе. Дополнительную "
"информацию о методах класса см. в :ref:`types`."

#: ../../library/functions.rst:280
msgid ""
"Class methods can now wrap other :term:`descriptors <descriptor>` such as :"
"func:`property`."
msgstr ""
"Методы класса теперь могут оборачивать другие :term:`дескрипторы "
"<descriptor>`, такие как :func:`property`."

#: ../../library/functions.rst:284
msgid ""
"Class methods now inherit the method attributes (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` and ``__annotations__``) and "
"have a new ``__wrapped__`` attribute."
msgstr ""
"Методы класса теперь наследуют атрибуты метода (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` и ``__annotations__``) и имеют "
"новый атрибут ``__wrapped__``."

#: ../../library/functions.rst:289
msgid ""
"Class methods can no longer wrap other :term:`descriptors <descriptor>` such "
"as :func:`property`."
msgstr ""
"Классовые методы больше не могут оборачивать другие :term:`дескрипторы "
"<descriptor>`, такие как :func:`property`."

#: ../../library/functions.rst:296
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a normal "
"string, a byte string, or an AST object.  Refer to the :mod:`ast` module "
"documentation for information on how to work with AST objects."
msgstr ""
"Компилирует *source* в код или объект AST. Объекты кода могут быть выполнены "
"с помощью функций :func:`exec` или :func:`eval`. *source* может быть обычной "
"строкой, байтовой строкой или объектом AST. См. документацию модуля :mod:"
"`ast` для получения информации о работе с объектами AST."

#: ../../library/functions.rst:301
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"Аргумент *filename* должен указывать на файл, из которого был прочитан код; "
"передайте некоторое узнаваемое значение, если код не был прочитан из файла "
"(обычно используется ``'<string>'``)."

#: ../../library/functions.rst:305
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"Аргумент *mode* определяет, какой тип кода должен быть скомпилирован; он "
"может быть ``'exec'``, если *source* состоит из последовательности "
"инструкций, ``'eval'``, если он состоит из одного выражения, или "
"``'single'``, если он состоит из одной интерактивной инструкции (в последнем "
"случае, инструкции выражений, которые вычисляются в нечто отличное от "
"``None``, будут напечатаны)."

#: ../../library/functions.rst:311
msgid ""
"The optional arguments *flags* and *dont_inherit* control which :ref:"
"`compiler options <ast-compiler-flags>` should be activated and which :ref:"
"`future features <future>` should be allowed. If neither is present (or both "
"are zero) the code is compiled with the same flags that affect the code that "
"is calling :func:`compile`. If the *flags* argument is given and "
"*dont_inherit* is not (or is zero) then the compiler options and the future "
"statements specified by the *flags* argument are used in addition to those "
"that would be used anyway. If *dont_inherit* is a non-zero integer then the "
"*flags* argument is it -- the flags (future features and compiler options) "
"in the surrounding code are ignored."
msgstr ""
"Необязательные аргументы *flags* и *dont_inherit* управляют активацией :ref:"
"`опций компилятора <ast-compiler-flags>` и разрешением :ref:`будущих "
"возможностей <future>`. Если ни один из них не указан (или оба равны нулю), "
"код компилируется с теми же флагами, которые влияют на код, вызывающий :func:"
"`compile`. Если указан аргумент *flags* и не указан *dont_inherit* (или "
"равен нулю), то опции компилятора и будущие инструкции, указанные в "
"аргументе *flags*, используются в дополнение к тем, которые все равно будут "
"использоваться. Если *dont_inherit* - это ненулевое целое число, то аргумент "
"*flags* - это и есть флаги (будущие возможности и опции компилятора), "
"указанные в окружающем коде, игнорируются."

#: ../../library/functions.rst:322
msgid ""
"Compiler options and future statements are specified by bits which can be "
"bitwise ORed together to specify multiple options. The bitfield required to "
"specify a given future feature can be found as the :attr:`~__future__."
"_Feature.compiler_flag` attribute on the :class:`~__future__._Feature` "
"instance in the :mod:`__future__` module. :ref:`Compiler flags <ast-compiler-"
"flags>` can be found in :mod:`ast` module, with ``PyCF_`` prefix."
msgstr ""
"Опции компилятора и будущие инструкции указываются с помощью битов, которые "
"можно объединять с помощью побитовой операции ИЛИ для указания нескольких "
"опций. Битовое поле, необходимое для указания определенной будущей функции, "
"можно найти в атрибуте :attr:`~__future__._Feature.compiler_flag` экземпляра "
"класса :class:`~__future__._Feature` в модуле :mod:`__future__`. :ref:`Флаги "
"компилятора <ast-compiler-flags>` можно найти в модуле :mod:`ast` с "
"префиксом ``PyCF_``."

#: ../../library/functions.rst:330
msgid ""
"The argument *optimize* specifies the optimization level of the compiler; "
"the default value of ``-1`` selects the optimization level of the "
"interpreter as given by :option:`-O` options.  Explicit levels are ``0`` (no "
"optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""
"Аргумент *optimize* определяет уровень оптимизации компилятора; значение по "
"умолчанию ``-1`` выбирает уровень оптимизации интерпретатора, заданный с "
"помощью опций :option:`-O`. Явные уровни - ``0`` (без оптимизации; "
"``__debug__`` равно true), ``1`` (assert'ы удаляются, ``__debug__`` равно "
"false) или ``2`` (строки документации также удаляются)."

#: ../../library/functions.rst:336
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`ValueError` if the source contains null bytes."
msgstr ""
"Эта функция возбуждает :exc:`SyntaxError`, если скомпилированный исходный "
"код недействителен, и :exc:`ValueError`, если исходный код содержит нулевые "
"байты."

#: ../../library/functions.rst:339
msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr ""
"Если вы хотите разобрать код на Python и получить его представление в виде "
"AST, см. :func:`ast.parse`."

#: ../../library/functions.rst:342
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source``, ``filename``."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``compile`` с аргументами "
"``source``, ``filename``."

#: ../../library/functions.rst:344
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source`` and ``filename``. This event may also be raised by implicit "
"compilation."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``compile`` с аргументами "
"``source``, ``filename``. Это событие также может быть вызвано неявной "
"компиляцией."

#: ../../library/functions.rst:350
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"При компиляции строки с многострочным кодом в режиме ``'single'`` или "
"``'eval'``, ввод должен быть завершен как минимум одним символом новой "
"строки. Это необходимо для обнаружения неполных и полных инструкций в "
"модуле :mod:`code`."

#: ../../library/functions.rst:357
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"Возможно вызвать сбой интерпретатора Python с помощью достаточно большой/"
"сложной строки при компиляции в объект AST из-за ограничений глубины стека в "
"компиляторе AST Python'а."

#: ../../library/functions.rst:361
msgid ""
"Allowed use of Windows and Mac newlines.  Also, input in ``'exec'`` mode "
"does not have to end in a newline anymore.  Added the *optimize* parameter."
msgstr ""
"Разрешено использование новых строк Windows и Mac. Также, ввод в режиме "
"``'exec'`` больше не обязан заканчиваться новой строкой. Добавлен параметр "
"*optimize*."

#: ../../library/functions.rst:365
msgid ""
"Previously, :exc:`TypeError` was raised when null bytes were encountered in "
"*source*."
msgstr ""
"Ранее, при обнаружении нулевых байтов в *source*, возбуждалось исключение :"
"exc:`TypeError`."

#: ../../library/functions.rst:369
msgid ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` can now be passed in flags to enable "
"support for top-level ``await``, ``async for``, and ``async with``."
msgstr ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` теперь может передаваться в флаги для "
"включения поддержки верхнего уровня ``await``, ``async for`` и ``async "
"with``."

#: ../../library/functions.rst:377
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex).  If *imag* is "
"omitted, it defaults to zero and the constructor serves as a numeric "
"conversion like :class:`int` and :class:`float`.  If both arguments are "
"omitted, returns ``0j``."
msgstr ""
"Возвращает комплексное число со значением *real* + *imag*\\*1j или "
"преобразовывает строку или число в комплексное число. Если первый параметр "
"является строкой, он будет интерпретирован как комплексное число, и функцию "
"нужно вызывать без второго параметра. Второй параметр никогда не может быть "
"строкой. Каждый аргумент может быть любым числовым типом (включая "
"комплексные числа). Если *imag* опущен, по умолчанию он равен нулю, и "
"конструктор служит для числового преобразования, как :class:`int` и :class:"
"`float`. Если оба аргумента опущены, возвращается ``0j``."

#: ../../library/functions.rst:386
msgid ""
"For a general Python object ``x``, ``complex(x)`` delegates to ``x."
"__complex__()``.  If :meth:`~object.__complex__` is not defined then it "
"falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""
"Для обобщённого объекта Python ``x``, ``complex(x)`` делегирует вызов метода "
"``x.__complex__()``. Если метод :meth:`~object.__complex__` не определен, то "
"вызывается метод :meth:`~object.__float__`. Если метод :meth:`!__float__` не "
"определен, то вызывается метод :meth:`~object.__index__`."

#: ../../library/functions.rst:393
msgid ""
"When converting from a string, the string must not contain whitespace around "
"the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""
"При преобразовании из строки, строка не должна содержать пробелы вокруг "
"центрального оператора ``+`` или ``-``. Например, ``complex('1+2j')`` "
"допустимо, но ``complex('1 + 2j')`` возбуждает исключение :exc:`ValueError`."

#: ../../library/functions.rst:398
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "Описание сложного типа приведено в :ref:`typesnumeric`."

#: ../../library/functions.rst:400 ../../library/functions.rst:707
#: ../../library/functions.rst:931
msgid "Grouping digits with underscores as in code literals is allowed."
msgstr ""
"Группировка цифр с использованием подчеркивания, как в коде литералов, "
"разрешена."

#: ../../library/functions.rst:403
msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__complex__` and :"
"meth:`~object.__float__` are not defined."
msgstr ""
"Возвращается к :meth:`~object.__index__`, если :meth:`~object.__complex__` "
"и :meth:`~object.__float__` не определены."

#: ../../library/functions.rst:410
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``. *name* "
"need not be a Python identifier (see :func:`setattr`)."
msgstr ""
"Это родственник функции :func:`setattr`. Аргументы - это объект и строка. "
"Строка должна быть именем одного из атрибутов объекта. Функция удаляет "
"указанный атрибут, если объект позволяет это. Например, ``delattr(x, "
"'foobar')`` эквивалентно ``del x.foobar``. *name* не обязательно должно быть "
"идентификатором Python (см. :func:`setattr`)."

#: ../../library/functions.rst:423
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"Создаёт новый словарь. Объект :class:`dict` является классом словаря. См. :"
"class:`dict` и :ref:`typesmapping` для документации об этом классе."

#: ../../library/functions.rst:426
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"Для других контейнеров см. встроенные классы :class:`list`, :class:`set` и :"
"class:`tuple`, а также модуль :mod:`collections`."

#: ../../library/functions.rst:433
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"Без аргументов возвращает список имен в текущей локальной области видимости. "
"С аргументом попытается вернуть список допустимых атрибутов для этого "
"объекта."

#: ../../library/functions.rst:436
msgid ""
"If the object has a method named :meth:`~object.__dir__`, this method will "
"be called and must return the list of attributes. This allows objects that "
"implement a custom :func:`~object.__getattr__` or :func:`~object."
"__getattribute__` function to customize the way :func:`dir` reports their "
"attributes."
msgstr ""
"Если объект имеет метод с именем :meth:`~object.__dir__`, этот метод будет "
"вызван и должен вернуть список атрибутов. Это позволяет объектам, которые "
"реализуют пользовательские функции :func:`~object.__getattr__` или :func:"
"`~object.__getattribute__`, настраивать способ отображения их атрибутов в "
"функции :func:`dir`."

#: ../../library/functions.rst:443
msgid ""
"If the object does not provide :meth:`~object.__dir__`, the function tries "
"its best to gather information from the object's :attr:`~object.__dict__` "
"attribute, if defined, and from its type object.  The resulting list is not "
"necessarily complete and may be inaccurate when the object has a custom :"
"func:`~object.__getattr__`."
msgstr ""
"Если объект не предоставляет :meth:`~object.__dir__`, функция пытается "
"собрать информацию из атрибута :attr:`~object.__dict__` объекта, если он "
"определен, и из его типа объекта. Полученный список не обязательно является "
"полным и может быть неточным, когда у объекта есть пользовательская :func:"
"`~object.__getattr__`."

#: ../../library/functions.rst:449
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"Стандартный механизм :func:`dir` ведет себя по-разному с различными типами "
"объектов, поскольку он пытается предоставить наиболее актуальную, а не "
"полную информацию:"

#: ../../library/functions.rst:453
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""
"Если объект является объектом модуля, список содержит имена атрибутов модуля."

#: ../../library/functions.rst:456
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"Если объект является объектом типа или класса, список содержит имена его "
"атрибутов и рекурсивно атрибуты его базовых классов."

#: ../../library/functions.rst:459
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"В противном случае, список содержит имена атрибутов объекта, имена атрибутов "
"его класса и рекурсивно атрибуты базовых классов его класса."

#: ../../library/functions.rst:463
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr "Результирующий список отсортирован в алфавитном порядке.  Например:"

#: ../../library/functions.rst:483
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
"Так как :func:`dir` предоставляется в основном для удобства использования в "
"интерактивном режиме, он пытается предоставить интересный набор имен, скорее "
"чем строго или последовательно определенный набор имен, и его подробное "
"поведение может меняться в разных версиях. Например, атрибуты метакласса не "
"включены в список результатов, когда аргументом является класс."

#: ../../library/functions.rst:493
msgid ""
"Take two (non-complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating "
"point numbers the result is ``(q, a % b)``, where *q* is usually ``math."
"floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` "
"is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, "
"and ``0 <= abs(a % b) < abs(b)``."
msgstr ""
"Принимает два (не комплексных) числа в качестве аргументов и возвращает пару "
"чисел, состоящую из их частного и остатка при использовании целочисленного "
"деления. При смешанных типах операндов применяются правила для бинарных "
"арифметических операторов. Для целых чисел результат такой же, как ``(a // "
"b, a % b)``. Для чисел с плавающей запятой результат такой: ``(q, a % b)``, "
"где *q* обычно равно ``math.floor(a / b)``, но может быть на 1 меньше. В "
"любом случае ``q * b + a % b`` очень близко к *a*, если ``a % b`` не равно "
"нулю, оно имеет тот же знак, что и *b*, и ``0 <= abs(a % b) < abs(b)``."

#: ../../library/functions.rst:505
msgid ""
"Return an enumerate object. *iterable* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration. The :meth:"
"`~iterator.__next__` method of the iterator returned by :func:`enumerate` "
"returns a tuple containing a count (from *start* which defaults to 0) and "
"the values obtained from iterating over *iterable*."
msgstr ""
"Возвращает объект перечисления. *iterable* должен быть последовательностью, :"
"term:`итератором` или другим объектом, поддерживающим итерацию. Метод :meth:"
"`~iterator.__next__` итератора, возвращаемого функцией :func:`enumerate`, "
"возвращает кортеж, содержащий счетчик (начиная с *start*, по умолчанию 0) и "
"значения, полученные при итерации по *iterable*."

#: ../../library/functions.rst:517
msgid "Equivalent to::"
msgstr "Эквивалентно::"

#: ../../library/functions.rst:529
msgid ""
"The arguments are a string and optional globals and locals.  If provided, "
"*globals* must be a dictionary.  If provided, *locals* can be any mapping "
"object."
msgstr ""
"Аргументы - это строка и необязательные глобальные и локальные переменные. "
"Если предоставлено, *globals* должен быть словарем. Если предоставлено, "
"*locals* может быть любым объектом сопоставления."

#: ../../library/functions.rst:533
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and does not contain a value for the key ``__builtins__``, a "
"reference to the dictionary of the built-in module :mod:`builtins` is "
"inserted under that key before *expression* is parsed.  That way you can "
"control what builtins are available to the executed code by inserting your "
"own ``__builtins__`` dictionary into *globals* before passing it to :func:"
"`eval`.  If the *locals* dictionary is omitted it defaults to the *globals* "
"dictionary.  If both dictionaries are omitted, the expression is executed "
"with the *globals* and *locals* in the environment where :func:`eval` is "
"called.  Note, *eval()* does not have access to the :term:`nested scopes "
"<nested scope>` (non-locals) in the enclosing environment."
msgstr ""
"Аргумент *выражение* разбирается и вычисляется как выражение Python "
"(технически говоря, список условий), используя словари *globals* и *locals* "
"в качестве глобального и локального пространства имён. Если словарь "
"*globals* присутствует и не содержит значения для ключа ``__builtins__``, то "
"перед разбором *выражения* в него вставляется ссылка на словарь встроенного "
"модуля :mod:`builtins`. Таким образом, вы можете контролировать доступные в "
"исполняемом коде встроенные функции, вставив свой собственный словарь "
"``__builtins__`` в *globals* перед его передачей в функцию :func:`eval`. "
"Если словарь *locals* опущен, то он по умолчанию равен словарю *globals*. "
"Если оба словаря опущены, выражение выполняется с использованием *globals* и "
"*locals* в окружении, где вызывается функция :func:`eval`. Обратите "
"внимание, что *eval()* не имеет доступа к :term:`вложенным областям "
"видимости <nested scope>` (нелокальным переменным) во внешней среде."

#: ../../library/functions.rst:548
msgid ""
"The return value is the result of the evaluated expression. Syntax errors "
"are reported as exceptions.  Example:"
msgstr ""
"Возвращаемое значение - это результат вычисленного выражения. Синтаксические "
"ошибки сообщаются как исключения.  Пример:"

#: ../../library/functions.rst:555
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case, pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"Эта функция также может использоваться для выполнения произвольных объектов "
"кода (таких, как те, которые создаются с помощью :func:`compile`). В этом "
"случае передайте объект кода вместо строки. Если объект кода был "
"скомпилирован с аргументом *mode* равным ``'exec'``, возвращаемое значение :"
"func:`eval` будет ``None``."

#: ../../library/functions.rst:560
msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions return the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""
"Подсказки: динамическое выполнение инструкций поддерживается функцией :func:"
"`exec`. Функции :func:`globals` и :func:`locals` возвращают текущий "
"глобальный и локальный словари соответственно, которые могут быть полезны "
"для передачи в :func:`eval` или :func:`exec`."

#: ../../library/functions.rst:565
msgid ""
"If the given source is a string, then leading and trailing spaces and tabs "
"are stripped."
msgstr ""
"Если заданный источник является строкой, то ведущие и завершающие пробелы и "
"табуляции удаляются."

#: ../../library/functions.rst:568
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"См. :func:`ast.literal_eval` для функции, которая может безопасно вычислять "
"строки с выражениями, содержащими только литералы."

#: ../../library/functions.rst:571 ../../library/functions.rst:612
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with argument "
"``code_object``."
msgstr ""
"Возбуждает:ref:`событие аудита <auditing>` ``exec`` с аргументом "
"``code_object``."

#: ../../library/functions.rst:573 ../../library/functions.rst:614
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with the code object as "
"the argument. Code compilation events may also be raised."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``exec`` с объектом кода в "
"качестве аргумента. Также могут быть возбуждены события компиляции кода."

#: ../../library/functions.rst:580
msgid ""
"This function supports dynamic execution of Python code. *object* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section :ref:`file-input` in the Reference Manual). Be aware that the :"
"keyword:`nonlocal`, :keyword:`yield`,  and :keyword:`return` statements may "
"not be used outside of function definitions even within the context of code "
"passed to the :func:`exec` function. The return value is ``None``."
msgstr ""
"Эта функция поддерживает динамическое выполнение кода Python. *object* "
"должен быть либо строкой, либо объектом кода. Если это строка, то она "
"разбирается как набор инструкций Pytho, которые затем выполняются (если не "
"возникает синтаксическая ошибка). [#]_ Если это объект кода, он просто "
"выполняется. Во всех случаях ожидается, что выполняемый код будет "
"действительным в качестве входных данных файла (см. раздел :ref:`file-input` "
"в Справочном Руководстве). Имейте в виду, что инструкции :keyword:"
"`nonlocal`, :keyword:`yield` и :keyword:`return` не могут использоваться за "
"пределами определений функций, даже в контексте кода, переданного функции :"
"func:`exec`. Возвращаемое значение - ``None``."

#: ../../library/functions.rst:591
msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the "
"current scope.  If only *globals* is provided, it must be a dictionary (and "
"not a subclass of dictionary), which will be used for both the global and "
"the local variables.  If *globals* and *locals* are given, they are used for "
"the global and local variables, respectively.  If provided, *locals* can be "
"any mapping object.  Remember that at the module level, globals and locals "
"are the same dictionary. If exec gets two separate objects as *globals* and "
"*locals*, the code will be executed as if it were embedded in a class "
"definition."
msgstr ""
"Во всех случаях, если необязательные части опущены, код выполняется в "
"текущей области видимости. Если предоставлен только *globals*, он должен "
"быть словарем (а не подклассом словаря), который будет использоваться как "
"для глобальных, так и для локальных переменных. Если предоставлены *globals* "
"и *locals*, они используются для глобальных и локальных переменных "
"соответственно. Если предоставлено *locals*, оно может быть любым объектом "
"сопоставления. Помните, что на уровне модуля глобальные и локальные "
"переменные представляют собой один и тот же словарь. Если exec получает два "
"отдельных объекта в качестве *globals* и *locals*, код будет выполняться "
"так, как если бы он был встроен в блок кода класса."

#: ../../library/functions.rst:601
msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module :mod:"
"`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""
"Если словарь *globals* не содержит значение для ключа ``__builtins__``, то "
"ссылка на словарь встроенного модуля :mod:`builtins` вставляется под этим "
"ключом. Таким образом, вы можете контролировать, какие встроенные функции "
"доступны для выполнения кода, вставляя свой собственный словарь "
"``__builtins__`` в *globals* перед его передачей в функцию :func:`exec`."

#: ../../library/functions.rst:607
msgid ""
"The *closure* argument specifies a closure--a tuple of cellvars. It's only "
"valid when the *object* is a code object containing free variables. The "
"length of the tuple must exactly match the number of free variables "
"referenced by the code object."
msgstr ""
"Аргумент *closure* указывает на замыкание - кортеж из ячеек. Он действителен "
"только тогда, когда *объект* является объектом кода, содержащим свободные "
"переменные. Длина кортежа должна точно соответствовать количеству свободных "
"переменных, на которые ссылается объект кода."

#: ../../library/functions.rst:619
msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current "
"global and local dictionary, respectively, which may be useful to pass "
"around for use as the second and third argument to :func:`exec`."
msgstr ""
"Встроенные функции :func:`globals` и :func:`locals` возвращают текущий "
"глобальный и локальный словарь соответственно, что может быть полезно для "
"передачи в качестве второго и третьего аргумента в :func:`exec`."

#: ../../library/functions.rst:625
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""
"*locals* по умолчанию действуют так, как описано для функции :func:`locals` "
"ниже: изменения в словаре по умолчанию *locals* не должны предприниматься. "
"Передайте явный словарь *locals*, если вам нужно увидеть эффекты кода на "
"*locals* после возврата функции :func:`exec`."

#: ../../library/functions.rst:630
msgid "Added the *closure* parameter."
msgstr "Добавлен параметр *closure*."

#: ../../library/functions.rst:636
msgid ""
"Construct an iterator from those elements of *iterable* for which *function* "
"is true.  *iterable* may be either a sequence, a container which supports "
"iteration, or an iterator.  If *function* is ``None``, the identity function "
"is assumed, that is, all elements of *iterable* that are false are removed."
msgstr ""
"Создаёт итератор из тех элементов *iterable*, для которых *function* "
"истинно. *iterable* может быть последовательностью, контейнером, "
"поддерживающим итерацию, или итератором. Если *function* равно ``None``, "
"предполагается функция идентичности, то есть все элементы *iterable*, "
"которые являются ложными, удаляются."

#: ../../library/functions.rst:642
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""
"Обратите внимание, что ``filter(function, iterable)`` эквивалентно "
"генераторному выражению ``(item for item in iterable if function(item))``, "
"если функция не равна ``None``, и ``(item for item in iterable if item)``, "
"если функция равна ``None``."

#: ../../library/functions.rst:647
msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* is false."
msgstr ""
"См. :func:`itertools.filterfalse` для дополнительной функции, которая "
"возвращает элементы *iterable*, для которых *function* является ложным."

#: ../../library/functions.rst:657
msgid "Return a floating point number constructed from a number or string *x*."
msgstr ""
"Возвращает число с плавающей точкой, построенное из числа или строки *x*."

#: ../../library/functions.rst:659
msgid ""
"If the argument is a string, it should contain a decimal number, optionally "
"preceded by a sign, and optionally embedded in whitespace.  The optional "
"sign may be ``'+'`` or ``'-'``; a ``'+'`` sign has no effect on the value "
"produced.  The argument may also be a string representing a NaN (not-a-"
"number), or positive or negative infinity.  More precisely, the input must "
"conform to the ``floatvalue`` production rule in the following grammar, "
"after leading and trailing whitespace characters are removed:"
msgstr ""
"Если аргумент является строкой, она должна содержать десятичное число, "
"необязательно с предшествующим знаком и необязательно заключенное в пробел. "
"Необязательный знак может быть ``'+'`` или ``'-'``; знак ``'+'`` не влияет "
"на полученное значение. Аргумент также может быть строкой, представляющей "
"NaN (не число) или положительную или отрицательную бесконечность. Более "
"точно, входные данные должны соответствовать правилу вывода ``floatvalue`` в "
"следующей грамматике после удаления ведущих и завершающих пробельных "
"символов:"

#: ../../library/functions.rst:678
msgid ""
"Case is not significant, so, for example, \"inf\", \"Inf\", \"INFINITY\", "
"and \"iNfINity\" are all acceptable spellings for positive infinity."
msgstr ""
"Регистр не имеет значения, поэтому, например, \"inf\", \"Inf\", \"INFINITY\" "
"и \"iNfINity\" - все допустимые написания для положительной бесконечности."

#: ../../library/functions.rst:681
msgid ""
"Otherwise, if the argument is an integer or a floating point number, a "
"floating point number with the same value (within Python's floating point "
"precision) is returned.  If the argument is outside the range of a Python "
"float, an :exc:`OverflowError` will be raised."
msgstr ""
"В противном случае, если аргумент является целым числом или числом с "
"плавающей запятой, будет возвращено число с плавающей запятой с тем же "
"значением (с точностью чисел с плавающей запятой в Python). Если аргумент "
"находится вне диапазона чисел с плавающей запятой в Python, будет возбуждено "
"исключение :exc:`OverflowError`."

#: ../../library/functions.rst:686
msgid ""
"For a general Python object ``x``, ``float(x)`` delegates to ``x."
"__float__()``.  If :meth:`~object.__float__` is not defined then it falls "
"back to :meth:`~object.__index__`."
msgstr ""
"Для обобщённого объекта Python ``x``, ``float(x)`` делегирует вызов метода "
"``x.__float__()``. Если :meth:`~object.__float__` не определён, то "
"вызывается :meth:`~object.__index__`."

#: ../../library/functions.rst:690
msgid "If no argument is given, ``0.0`` is returned."
msgstr "Если аргументы не заданы, возвращает ``0.0``."

#: ../../library/functions.rst:692
msgid "Examples::"
msgstr "Примеры::"

#: ../../library/functions.rst:705
msgid "The float type is described in :ref:`typesnumeric`."
msgstr "Тип float описан в :ref:`typesnumeric`."

#: ../../library/functions.rst:713
msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__float__` is not "
"defined."
msgstr ""
"Возвращается к :meth:`~object.__index__`, если :meth:`~object.__float__` не "
"определен."

#: ../../library/functions.rst:723
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument; however, there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"Преобразовывает *значение* в \"отформатированное\" представление, "
"управляемое *format_spec*. Интерпретация *format_spec* будет зависеть от "
"типа аргумента *значение*; однако существует стандартный синтаксис "
"форматирования, который используется большинством встроенных типов: :ref:"
"`formatspec`."

#: ../../library/functions.rst:728
msgid ""
"The default *format_spec* is an empty string which usually gives the same "
"effect as calling :func:`str(value) <str>`."
msgstr ""
"Стандартное значение *format_spec* - пустая строка, которая обычно дает тот "
"же эффект, что и вызов :func:`str(value) <str>`."

#: ../../library/functions.rst:731
msgid ""
"A call to ``format(value, format_spec)`` is translated to ``type(value)."
"__format__(value, format_spec)`` which bypasses the instance dictionary when "
"searching for the value's :meth:`~object.__format__` method. A :exc:"
"`TypeError` exception is raised if the method search reaches :mod:`object` "
"and the *format_spec* is non-empty, or if either the *format_spec* or the "
"return value are not strings."
msgstr ""
"Вызов ``format(value, format_spec)`` преобразуется в ``type(value)."
"__format__(value, format_spec)``, который обходит словарь экземпляра при "
"поиске метода :meth:`~object.__format__` значения. Возникает исключение :exc:"
"`TypeError`, если поиск метода достигает :mod:`object` и *format_spec* не "
"является пустым, или если *format_spec* или возвращаемое значение не "
"являются строками."

#: ../../library/functions.rst:738
msgid ""
"``object().__format__(format_spec)`` raises :exc:`TypeError` if "
"*format_spec* is not an empty string."
msgstr ""
"``object().__format__(format_spec)`` вызывает исключение :exc:`TypeError`, "
"если *format_spec* не является пустой строкой."

#: ../../library/functions.rst:747
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"Вернуть новый объект :class:`frozenset`, опционально с элементами, взятыми "
"из *iterable*. ``frozenset`` - это встроенный класс. См. :class:`frozenset` "
"и :ref:`types-set` для документации об этом классе."

#: ../../library/functions.rst:751
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"Для других контейнеров см. встроенные классы :class:`set`, :class:`list`, :"
"class:`tuple` и :class:`dict`, а также модуль :mod:`collections`."

#: ../../library/functions.rst:759
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised. *name* need not be a Python identifier (see :func:`setattr`)."
msgstr ""
"Возвращает значение именованного атрибута *объекта*. *name* должно быть "
"строкой. Если строка является именем одного из атрибутов объекта, "
"результатом будет значение этого атрибута. Например, ``getattr(x, "
"'foobar')`` эквивалентно ``x.foobar``. Если именованный атрибут не "
"существует, возвращается *default*, если он предоставлен, в противном случае "
"возбуждается исключение :exc:`AttributeError`. *name* не обязательно должно "
"быть идентификатором Python (см. :func:`setattr`)."

#: ../../library/functions.rst:768
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to retrieve it with :func:"
"`getattr`."
msgstr ""
"Так как :ref:`сокрытие имен <private-name-mangling>` происходит во время "
"компиляции, необходимо вручную изменить имя приватного атрибута (атрибута с "
"двумя ведущими подчеркиваниями), чтобы получить его с помощью :func:"
"`getattr`."

#: ../../library/functions.rst:776
msgid ""
"Return the dictionary implementing the current module namespace. For code "
"within functions, this is set when the function is defined and remains the "
"same regardless of where the function is called."
msgstr ""
"Возвращает словарь, реализующий текущее пространство имён модуля. Для кода "
"внутри функций это устанавливается при определении функции и остается "
"неизменным независимо от того, где вызывается функция."

#: ../../library/functions.rst:783
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an :exc:`AttributeError` or not.)"
msgstr ""
"Аргументы - это объект и строка. Результат будет ``True``, если строка "
"является именем одного из атрибутов объекта, и ``False``, если нет. (Это "
"реализовано путем вызова ``getattr(object, name)`` и проверки, возбуждает ли "
"это исключение :exc:`AttributeError` или нет.)"

#: ../../library/functions.rst:791
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers.  They are used to quickly compare dictionary keys during a "
"dictionary lookup.  Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""
"Возвращает хэш-значение объекта (если оно есть). Хэш-значения - это целые "
"числа. Они используются для быстрого сравнения ключей словаря во время "
"поиска по словарю. Числовые значения, которые сравниваются как равные, имеют "
"одно и то же хэш-значение (даже если они разных типов, как в случае с 1 и "
"1.0)."

#: ../../library/functions.rst:798
msgid ""
"For objects with custom :meth:`~object.__hash__` methods, note that :func:"
"`hash` truncates the return value based on the bit width of the host machine."
msgstr ""
"Для объектов с пользовательскими методами :meth:`~object.__hash__`, обратите "
"внимание, что :func:`hash` усекает возвращаемое значение на основе битовой "
"ширины хост-машины."

#: ../../library/functions.rst:805
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"Вызывает встроенную систему справки. (Эта функция предназначена для "
"интерактивного использования.) Если аргумент не указан, интерактивная "
"система справки запускается на консоли интерпретатора. Если аргумент "
"является строкой, то строка ищется как имя модуля, функции, класса, метода, "
"ключевого слова или темы документации, и на консоли печатается страница "
"справки. Если аргумент является любым другим типом объекта, генерируется "
"страница справки по объекту."

#: ../../library/functions.rst:812
msgid ""
"Note that if a slash(/) appears in the parameter list of a function when "
"invoking :func:`help`, it means that the parameters prior to the slash are "
"positional-only. For more info, see :ref:`the FAQ entry on positional-only "
"parameters <faq-positional-only-arguments>`."
msgstr ""
"Обратите внимание, что если косая черта (/) появляется в списке параметров "
"функции при вызове :func:`help`, это означает, что параметры перед косой "
"чертой являются только-позиционными. Дополнительную информацию см. в :ref:"
"`ЧаВо по только-позиционным параметрам <faq-positional-only-arguments>`."

#: ../../library/functions.rst:817
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""
"Эта функция добавляется во встроенное пространство имён модулем :mod:`site`."

#: ../../library/functions.rst:819
msgid ""
"Changes to :mod:`pydoc` and :mod:`inspect` mean that the reported signatures "
"for callables are now more comprehensive and consistent."
msgstr ""
"Изменения в модулях :mod:`pydoc` и :mod:`inspect` означают, что отчетные "
"сигнатуры для вызываемых объектов теперь более всеобъемлющие и "
"последовательные."

#: ../../library/functions.rst:826
msgid ""
"Convert an integer number to a lowercase hexadecimal string prefixed with "
"\"0x\". If *x* is not a Python :class:`int` object, it has to define an :"
"meth:`~object.__index__` method that returns an integer. Some examples:"
msgstr ""
"Преобразовывает целое число в строку в нижнем регистре в шестнадцатеричной "
"системе счисления с префиксом \"0x\". Если *x* не является объектом Python :"
"class:`int`, он должен определить метод :meth:`~object.__index__`, который "
"возвращает целое число. Некоторые примеры:"

#: ../../library/functions.rst:835
msgid ""
"If you want to convert an integer number to an uppercase or lower "
"hexadecimal string with prefix or not, you can use either of the following "
"ways:"
msgstr ""
"Если вы хотите преобразовать целое число в строку в верхнем или нижнем "
"регистре шестнадцатеричного формата с префиксом или без него, вы можете "
"использовать один из следующих способов:"

#: ../../library/functions.rst:847
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr ""
"См. также :func:`int` для преобразования шестнадцатеричной строки в целое "
"число с основанием 16."

#: ../../library/functions.rst:852
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""
"Для получения шестнадцатеричного представления строки для числа с плавающей "
"запятой используйте метод :meth:`float.hex`."

#: ../../library/functions.rst:858
msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""
"Возвращает \"идентификатор\" объекта. Это целое число, которое "
"гарантированно будет уникальным и постоянным для данного объекта в течение "
"его жизни. У двух объектов с неперекрывающимися временами жизни может быть "
"одно и то же значение :func:`id`."

#: ../../library/functions.rst:863
msgid "This is the address of the object in memory."
msgstr "Это адрес объекта в памяти."

#: ../../library/functions.rst:865
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.id`` with argument "
"``id``."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``builtins.id`` с аргументом "
"``id``."

#: ../../library/functions.rst:871
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""
"Если аргумент *prompt* присутствует, он записывается в стандартный вывод без "
"завершающего символа новой строки. Затем функция считывает строку из ввода, "
"преобразует ее в строку (удаляя завершающий символ новой строки) и "
"возвращает ее. При чтении EOF возбуждается исключение :exc:`EOFError`. "
"Пример::"

#: ../../library/functions.rst:881
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
"Если модуль :mod:`readline` был загружен, то функция :func:`input` будет "
"использовать его для предоставления расширенных функций редактирования строк "
"и истории."

#: ../../library/functions.rst:884
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt``."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``builtins.input`` с аргументом "
"``prompt``."

#: ../../library/functions.rst:886
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt`` before reading input"
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``builtins.input`` с аргументом "
"``prompt`` перед чтением ввода"

#: ../../library/functions.rst:889
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"argument ``result``."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``builtins.input/result`` с "
"аргументом ``result``."

#: ../../library/functions.rst:891
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"the result after successfully reading input."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` ``builtins.input/result`` с "
"результатом после успешного чтения ввода."

#: ../../library/functions.rst:898
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* defines :meth:`~object.__int__`, "
"``int(x)`` returns ``x.__int__()``.  If *x* defines :meth:`~object."
"__index__`, it returns ``x.__index__()``.  If *x* defines :meth:`~object."
"__trunc__`, it returns ``x.__trunc__()``. For floating point numbers, this "
"truncates towards zero."
msgstr ""
"Возвращает объект целого числа, созданный из числа или строки *x*, или "
"возвращает ``0``, если аргументы не заданы. Если *x* определяет :meth:"
"`~object.__int__`, ``int(x)`` возвращает ``x.__int__()``. Если *x* "
"определяет :meth:`~object.__index__`, он возвращает ``x.__index__()``. Если "
"*x* определяет :meth:`~object.__trunc__`, он возвращает ``x.__trunc__()``. "
"Для чисел с плавающей запятой это значение усекается до нуля."

#: ../../library/functions.rst:905
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string, :"
"class:`bytes`, or :class:`bytearray` instance representing an integer in "
"radix *base*.  Optionally, the string can be preceded by ``+`` or ``-`` "
"(with no space in between), have leading zeros, be surrounded by whitespace, "
"and have single underscores interspersed between digits."
msgstr ""
"Если *x* не является числом или если задан *base*, то *x* должен быть "
"строкой, экземпляром класса :class:`bytes` или :class:`bytearray`, "
"представляющим целое число в основании *base*. По желанию, строка может "
"предшествовать символу ``+`` или ``-`` (без пробела между ними), иметь "
"ведущие нули, быть окруженной пробелами и иметь одиночные подчеркивания "
"между цифрами."

#: ../../library/functions.rst:911
msgid ""
"A base-n integer string contains digits, each representing a value from 0 to "
"n-1. The values 0--9 can be represented by any Unicode decimal digit. The "
"values 10--35 can be represented by ``a`` to ``z`` (or ``A`` to ``Z``). The "
"default *base* is 10. The allowed bases are 0 and 2--36. Base-2, -8, and -16 "
"strings can be optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or "
"``0x``/``0X``, as with integer literals in code.  For base 0, the string is "
"interpreted in a similar way to an :ref:`integer literal in code "
"<integers>`, in that the actual base is 2, 8, 10, or 16 as determined by the "
"prefix. Base 0 also disallows leading zeros: ``int('010', 0)`` is not legal, "
"while ``int('010')`` and ``int('010', 8)`` are."
msgstr ""
"Строка целого числа в системе счисления основания n содержит цифры, каждая "
"из которых представляет значение от 0 до n-1. Значения 0--9 могут быть "
"представлены любой десятичной цифрой Юникода. Значения 10--35 могут быть "
"представлены символами ``a`` до ``z`` (или ``A`` до ``Z``). По умолчанию "
"*основание* равно 10. Допустимые основания - 0 и 2--36. Строки с основанием "
"2, -8 и -16 могут необязательно иметь префиксы ``0b``/``0B``, ``0o``/``0O`` "
"или ``0x``/``0X``, как литералы целых чисел в коде. Для основания 0 строка "
"интерпретируется аналогично :ref:`литералу целого числа в коде <integers>`, "
"в том смысле, что фактическое основание определяется префиксом и может быть "
"равно 2, 8, 10 или 16. Основание 0 также запрещает ведущие нули: "
"``int('010', 0)`` недопустимо, в то время как ``int('010')`` и ``int('010', "
"8)`` допустимы."

#: ../../library/functions.rst:922
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "Тип целого числа описан в :ref:`typesnumeric`."

#: ../../library/functions.rst:924
msgid ""
"If *base* is not an instance of :class:`int` and the *base* object has a :"
"meth:`base.__index__ <object.__index__>` method, that method is called to "
"obtain an integer for the base.  Previous versions used :meth:`base.__int__ "
"<object.__int__>` instead of :meth:`base.__index__ <object.__index__>`."
msgstr ""
"Если *base* не является экземпляром класса :class:`int` и у объекта *base* "
"есть метод :meth:`base.__index__ <object.__index__>`, этот метод вызывается "
"для получения целого числа для *base*. В предыдущих версиях вместо :meth:"
"`base.__index__ <object.__index__>` использовался метод :meth:`base.__int__ "
"<object.__int__>`."

#: ../../library/functions.rst:937
msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__int__` is not "
"defined."
msgstr ""
"Возвращается к :meth:`~object.__index__`, если :meth:`~object.__int__` не "
"определен."

#: ../../library/functions.rst:940
msgid "The delegation to :meth:`~object.__trunc__` is deprecated."
msgstr "Делегирование к :meth:`~object.__trunc__` устарело."

#: ../../library/functions.rst:943
msgid ""
":class:`int` string inputs and string representations can be limited to help "
"avoid denial of service attacks. A :exc:`ValueError` is raised when the "
"limit is exceeded while converting a string *x* to an :class:`int` or when "
"converting an :class:`int` into a string would exceed the limit. See the :"
"ref:`integer string conversion length limitation <int_max_str_digits>` "
"documentation."
msgstr ""
"Строковые входные данные :class:`int` и строковые представления могут быть "
"ограничены, чтобы избежать атак отказа в обслуживании. :exc:`ValueError` "
"возбуждается, когда превышен лимит при преобразовании строки *x* в :class:"
"`int` или при преобразовании :class:`int` в строку превысил бы лимит. См. "
"документацию :ref:`ограничение длины преобразования целого числа в строку "
"<int_max_str_digits>`."

#: ../../library/functions.rst:953
msgid ""
"Return ``True`` if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect, or :term:`virtual <abstract base "
"class>`) subclass thereof.  If *object* is not an object of the given type, "
"the function always returns ``False``. If *classinfo* is a tuple of type "
"objects (or recursively, other such tuples) or a :ref:`types-union` of "
"multiple types, return ``True`` if *object* is an instance of any of the "
"types. If *classinfo* is not a type or tuple of types and such tuples, a :"
"exc:`TypeError` exception is raised. :exc:`TypeError` may not be raised for "
"an invalid type if an earlier check succeeds."
msgstr ""
"Возвращает ``True``, если аргумент *object* является экземпляром аргумента "
"*classinfo*, или его (прямого, косвенного или :term:`виртуального <abstract "
"base class>`) подкласса. Если *object* не является объектом данного типа, "
"функция всегда возвращает ``False``. Если *classinfo* является кортежем "
"типовых объектов (или рекурсивно, других таких кортежей) или объединением "
"типов :ref:`types-union`, возвращается ``True``, если *object* является "
"экземпляром любого из типов. Если *classinfo* не является типом или кортежем "
"типов и таких кортежей, возбуждается исключение :exc:`TypeError`. :exc:"
"`TypeError` может не возбуждаться для недопустимого типа, если предыдущая "
"проверка успешна."

#: ../../library/functions.rst:964 ../../library/functions.rst:978
msgid "*classinfo* can be a :ref:`types-union`."
msgstr "*classinfo* может быть :ref:`types-union`."

#: ../../library/functions.rst:970
msgid ""
"Return ``True`` if *class* is a subclass (direct, indirect, or :term:"
"`virtual <abstract base class>`) of *classinfo*.  A class is considered a "
"subclass of itself. *classinfo* may be a tuple of class objects (or "
"recursively, other such tuples) or a :ref:`types-union`, in which case "
"return ``True`` if *class* is a subclass of any entry in *classinfo*.  In "
"any other case, a :exc:`TypeError` exception is raised."
msgstr ""
"Возвращает ``True``, если *class* является подклассом (прямым, косвенным "
"или :term:`виртуальным <abstract base class>`) *classinfo*. Класс считается "
"подклассом самого себя. *classinfo* может быть кортежем объектов класса (или "
"рекурсивно, других таких кортежей) или :ref:`types-union`, в этом случае "
"возвращается ``True``, если *class* является подклассом любого элемента в "
"*classinfo*. В любом другом случае возбуждается исключение :exc:`TypeError`."

#: ../../library/functions.rst:985
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the :"
"term:`iterable` protocol (the :meth:`~object.__iter__` method), or it must "
"support the sequence protocol (the :meth:`~object.__getitem__` method with "
"integer arguments starting at ``0``).  If it does not support either of "
"those protocols, :exc:`TypeError` is raised. If the second argument, "
"*sentinel*, is given, then *object* must be a callable object.  The iterator "
"created in this case will call *object* with no arguments for each call to "
"its :meth:`~iterator.__next__` method; if the value returned is equal to "
"*sentinel*, :exc:`StopIteration` will be raised, otherwise the value will be "
"returned."
msgstr ""
"Возвращает объект :term:`итератора`. Первый аргумент интерпретируется по-"
"разному в зависимости от наличия второго аргумента. Без второго аргумента "
"*object* должен быть объектом коллекции, поддерживающим протокол :term:"
"`iterable` (метод :meth:`~object.__iter__`), или он должен поддерживать "
"протокол последовательности (метод :meth:`~object.__getitem__` с "
"целочисленными аргументами, начиная с ``0``). Если он не поддерживает ни "
"один из этих протоколов, возбуждается исключение :exc:`TypeError`. Если "
"задан второй аргумент *sentinel*, то *object* должен быть вызываемым "
"объектом. Итератор, созданный в этом случае, будет вызывать *object* без "
"аргументов для каждого вызова его метода :meth:`~iterator.__next__`; если "
"возвращаемое значение равно *sentinel*, возбуждается исключение :exc:"
"`StopIteration`, в противном случае будет возвращено значение."

#: ../../library/functions.rst:999
msgid "See also :ref:`typeiter`."
msgstr "См. также :ref:`typeiter`."

#: ../../library/functions.rst:1001
msgid ""
"One useful application of the second form of :func:`iter` is to build a "
"block-reader. For example, reading fixed-width blocks from a binary database "
"file until the end of file is reached::"
msgstr ""
"Одно из полезных применений второй формы :func:`iter` - это создание блок-"
"ридера. Например, чтение блоков фиксированной ширины из двоичного файла базы "
"данных до достижения конца файла::"

#: ../../library/functions.rst:1013
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"Возвращает длину (количество элементов) объекта. Аргумент может быть "
"последовательностью (например, строкой, байтами, кортежем, списком или "
"диапазоном) или коллекцией (например, словарем, множеством или неизменяемым "
"множеством)."

#: ../../library/functions.rst:1019
msgid ""
"``len`` raises :exc:`OverflowError` on lengths larger than :data:`sys."
"maxsize`, such as :class:`range(2 ** 100) <range>`."
msgstr ""
"``len`` возбуждает :exc:`OverflowError` на длинах, превышающих :data:`sys."
"maxsize`, таких как :class:`range(2 ** 100) <range>`."

#: ../../library/functions.rst:1028
msgid ""
"Rather than being a function, :class:`list` is actually a mutable sequence "
"type, as documented in :ref:`typesseq-list` and :ref:`typesseq`."
msgstr ""
"Вместо того чтобы быть функцией, :class:`list` на самом деле является "
"изменяемым типом последовательности, как указано в :ref:`typesseq-list` и :"
"ref:`typesseq`."

#: ../../library/functions.rst:1034
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks. Note that at the module level, :func:"
"`locals` and :func:`globals` are the same dictionary."
msgstr ""
"Обновляет и возвращает словарь, представляющий текущую локальную таблицу "
"символов. Свободные переменные возвращаются с помощью функции :func:"
"`locals`, когда она вызывается в блоках функций, но не в блоках классов. "
"Обратите внимание, что на уровне модуля :func:`locals` и :func:`globals` "
"представляют собой один и тот же словарь."

#: ../../library/functions.rst:1040
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""
"Содержимое этого словаря не должно изменяться; изменения могут не влиять на "
"значения локальных и свободных переменных, используемых интерпретатором."

#: ../../library/functions.rst:1045
msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterables* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when "
"the shortest iterable is exhausted.  For cases where the function inputs are "
"already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""
"Возвращает итератор, который применяет *function* к каждому элементу "
"*iterable*, выдавая результаты. Если передаются дополнительные аргументы "
"*iterables*, *function* должна принимать столько аргументов, сколько "
"передано, и применяться к элементам из всех итерируемых объектов "
"параллельно. При наличии нескольких итерируемых объектов итератор "
"останавливается, когда самый короткий итерируемый объект исчерпан. Для "
"случаев, когда входные данные функции уже упорядочены в кортежи аргументов, "
"см. :func:`itertools.starmap`\\."

#: ../../library/functions.rst:1057
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""
"Возвращает наибольший элемент итерируемого объекта или наибольший ил двух и "
"более аргументов."

#: ../../library/functions.rst:1060
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The largest item in the iterable is returned.  If two or more positional "
"arguments are provided, the largest of the positional arguments is returned."
msgstr ""
"Если предоставляется один позиционный аргумент, это должен быть итерируемый "
"объект. Возвращается наибольшее значение элемента итерируемого объекта. Если "
"предоставляется два или более позиционных аргумента, возвращается наибольший "
"из позиционных аргументов."

#: ../../library/functions.rst:1065 ../../library/functions.rst:1103
msgid ""
"There are two optional keyword-only arguments. The *key* argument specifies "
"a one-argument ordering function like that used for :meth:`list.sort`. The "
"*default* argument specifies an object to return if the provided iterable is "
"empty. If the iterable is empty and *default* is not provided, a :exc:"
"`ValueError` is raised."
msgstr ""
"Есть два необязательных только-именованных аргумента. Аргумент *key* "
"определяет функцию сортировки с одним аргументом, подобную той, которая "
"используется для :meth:`list.sort`. Аргумент *default* определяет объект, "
"который будет возвращен, если предоставленный итерируемый объект пуст. Если "
"итерируемый объект пуст и *default* не предоставлен, возбуждается "
"исключение :exc:`ValueError`."

#: ../../library/functions.rst:1071
msgid ""
"If multiple items are maximal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc, reverse=True)[0]`` and ``heapq."
"nlargest(1, iterable, key=keyfunc)``."
msgstr ""
"Если несколько элементов являются максимальными, функция вернет первый "
"найденный. Это согласуется с другими инструментами, сохраняющими "
"стабильность сортировки, такими как ``sorted(iterable, key=keyfunc, "
"reverse=True)[0]`` и ``heapq.nlargest(1, iterable, key=keyfunc)``."

#: ../../library/functions.rst:1076 ../../library/functions.rst:1114
msgid "Added the *default* keyword-only parameter."
msgstr "Добавлен только-именованный параметр *default*."

#: ../../library/functions.rst:1079 ../../library/functions.rst:1117
msgid "The *key* can be ``None``."
msgstr "*key* может быть ``None``."

#: ../../library/functions.rst:1087
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"Возвращает объект \"memory view\", созданный из данного аргумента. См. :ref:"
"`typememoryview` для получения дополнительной информации."

#: ../../library/functions.rst:1095
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""
"Возвращает наименьший элемент итерируемого объекта или наименьший из двух и "
"более аргументов."

#: ../../library/functions.rst:1098
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The smallest item in the iterable is returned.  If two or more positional "
"arguments are provided, the smallest of the positional arguments is returned."
msgstr ""
"Если предоставлен один позиционный аргумент, он должен быть :term:"
"`итерируемым объектом`. Возвращается наименьший элемент в итерируемом "
"объекте. Если предоставлено два или более позиционных аргумента, "
"возвращается наименьший из позиционных аргументов."

#: ../../library/functions.rst:1109
msgid ""
"If multiple items are minimal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc)[0]`` and ``heapq.nsmallest(1, "
"iterable, key=keyfunc)``."
msgstr ""
"Если несколько элементов являются минимальными, функция возвращает первый "
"найденный. Это согласуется с другими инструментами, сохраняющими "
"стабильность сортировки, такими как ``sorted(iterable, key=keyfunc)[0]`` и "
"``heapq.nsmallest(1, iterable, key=keyfunc)``."

#: ../../library/functions.rst:1124
msgid ""
"Retrieve the next item from the :term:`iterator` by calling its :meth:"
"`~iterator.__next__` method.  If *default* is given, it is returned if the "
"iterator is exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""
"Получает следующий элемент из :term:`итератора`, вызвав его метод :meth:"
"`~iterator.__next__`. Если *default* указан, он возвращается, если итератор "
"исчерпан, в противном случае возбуждается исключение :exc:`StopIteration`."

#: ../../library/functions.rst:1131
msgid ""
"Return a new featureless object.  :class:`object` is a base for all classes. "
"It has methods that are common to all instances of Python classes.  This "
"function does not accept any arguments."
msgstr ""
"Возвращает новый объект без фич. :class:`object` является базовым для всех "
"классов. Он имеет методы, которые общие для всех экземпляров классов Python. "
"Эта функция не принимает никаких аргументов."

#: ../../library/functions.rst:1137
msgid ""
":class:`object` does *not* have a :attr:`~object.__dict__`, so you can't "
"assign arbitrary attributes to an instance of the :class:`object` class."
msgstr ""
":class:`object` *не* имеет :attr:`~object.__dict__`, поэтому вы не можете "
"присваивать произвольные атрибуты экземпляру класса :class:`object`."

#: ../../library/functions.rst:1143
msgid ""
"Convert an integer number to an octal string prefixed with \"0o\".  The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`~object.__index__` method that returns an "
"integer. For example:"
msgstr ""
"Преобразует целое число в восьмеричную строку с префиксом \"0o\". Результат "
"является верным выражением Python. Если *x* не является объектом Python "
"класса :class:`int`, он должен определить метод :meth:`~object.__index__`, "
"который возвращает целое число. Например:"

#: ../../library/functions.rst:1153
msgid ""
"If you want to convert an integer number to an octal string either with the "
"prefix \"0o\" or not, you can use either of the following ways."
msgstr ""
"Если вы хотите преобразовать целое число в восьмеричную строку с префиксом "
"\"0o\" или без него, вы можете использовать любой из следующих способов."

#: ../../library/functions.rst:1170
msgid ""
"Open *file* and return a corresponding :term:`file object`.  If the file "
"cannot be opened, an :exc:`OSError` is raised. See :ref:`tut-files` for more "
"examples of how to use this function."
msgstr ""
"Открывает *file* и возвращает соответствующий :term:`файловый объект`. Если "
"файл не может быть открыт, возбуждается :exc:`OSError`. См. :ref:`tut-files` "
"для получения дополнительных примеров использования этой функции."

#: ../../library/functions.rst:1174
msgid ""
"*file* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is "
"given, it is closed when the returned I/O object is closed unless *closefd* "
"is set to ``False``.)"
msgstr ""
"*file* - это :term:`путеподобный объект`, который предоставляет путь "
"(абсолютный или относительный от текущего рабочего каталога) к файлу, "
"который должен быть открыт, или целочисленный файловый дескриптор файла, "
"который должен быть обёрнут. (Если задан файловый дескриптор, он "
"закрывается, когда закрывается возвращаемый объект ввода/вывода, если "
"*closefd* не установлено в ``False``.)"

#: ../../library/functions.rst:1180
msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), ``'x'`` for exclusive creation, and ``'a'`` for appending "
"(which on *some* Unix systems, means that *all* writes append to the end of "
"the file regardless of the current seek position).  In text mode, if "
"*encoding* is not specified the encoding used is platform-dependent: :func:"
"`locale.getencoding()` is called to get the current locale encoding. (For "
"reading and writing raw bytes use binary mode and leave *encoding* "
"unspecified.)  The available modes are:"
msgstr ""
"*mode* - это необязательная строка, которая указывает режим открытия файла. "
"По умолчанию он устанавливается на ``'r'``, что означает открытие файла для "
"чтения в текстовом режиме. Другие распространенные значения: ``'w'`` для "
"записи (если файл уже существует, он будет очищен), ``'x'`` для "
"эксклюзивного создания и ``'a'`` для добавления (что на *некоторых* системах "
"Unix означает, что *все* записи добавляются в конец файла, независимо от "
"текущей позиции чтения). В текстовом режиме, если не указано *encoding*, "
"используется кодировка, зависящая от платформы: вызывается функция :func:"
"`locale.getencoding()` для получения текущей локальной кодировки. (Для "
"чтения и записи сырых байтов используйте двоичный режим и не указывайте "
"*encoding*.) Доступные режимы:"

#: ../../library/functions.rst:1197
msgid "Character"
msgstr "Символ"

#: ../../library/functions.rst:1197
msgid "Meaning"
msgstr "Значение"

#: ../../library/functions.rst:1199
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/functions.rst:1199
msgid "open for reading (default)"
msgstr "открыть для чтения (по умолчанию)"

#: ../../library/functions.rst:1200
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/functions.rst:1200
msgid "open for writing, truncating the file first"
msgstr "открыть для записи, сначала очистив файл"

#: ../../library/functions.rst:1201
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/functions.rst:1201
msgid "open for exclusive creation, failing if the file already exists"
msgstr "открыть для эксклюзивного создания; неудача, если файл уже существует"

#: ../../library/functions.rst:1202
msgid "``'a'``"
msgstr "``'a'``"

#: ../../library/functions.rst:1202
msgid "open for writing, appending to the end of file if it exists"
msgstr "открыть для записи, добавляя в конец файла, если он существует"

#: ../../library/functions.rst:1203
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/functions.rst:1203 ../../library/functions.rst:1347
msgid "binary mode"
msgstr "бинарный режим"

#: ../../library/functions.rst:1204
msgid "``'t'``"
msgstr "``'t'``"

#: ../../library/functions.rst:1204
msgid "text mode (default)"
msgstr "текстовый режим (по умолчанию)"

#: ../../library/functions.rst:1205
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/functions.rst:1205
msgid "open for updating (reading and writing)"
msgstr "открыть для обновления (чтения и записи)"

#: ../../library/functions.rst:1208
msgid ""
"The default mode is ``'r'`` (open for reading text, a synonym of ``'rt'``). "
"Modes ``'w+'`` and ``'w+b'`` open and truncate the file.  Modes ``'r+'`` and "
"``'r+b'`` open the file with no truncation."
msgstr ""
"Режим по умолчанию - ``'r'`` (открытие для чтения текста, синоним ``'rt'``). "
"Режимы ``'w+'`` и ``'w+b'`` открывают и очищают файл. Режимы ``'r+'`` и "
"``'r+b'`` открывают файл без очистки."

#: ../../library/functions.rst:1212
msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""
"Как упоминается в :ref:`io-overview`, Python различает два типа ввода-"
"вывода: двоичный и текстовый. Файлы, открытые в двоичном режиме (включая "
"``'b'`` в аргументе *mode*), возвращают содержимое в виде объектов :class:"
"`bytes` без какой-либо декодировки. В текстовом режиме (по умолчанию или "
"когда в аргументе *mode* указано ``'t'``), содержимое файла возвращается в "
"виде объекта :class:`str`, при этом байты сначала декодируются с "
"использованием кодировки, зависящей от платформы, или с использованием "
"*encoding*, если она указана."

#: ../../library/functions.rst:1222
msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""
"Python не зависит от базовой операционной системы в понятии текстовых "
"файлов; вся обработка выполняется самим Python и, следовательно, не зависит "
"от платформы."

#: ../../library/functions.rst:1226
msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0 "
"to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable when writing in text mode), and an integer > 1 to "
"indicate the size in bytes of a fixed-size chunk buffer. Note that "
"specifying a buffer size this way applies for binary buffered I/O, but "
"``TextIOWrapper`` (i.e., files opened with ``mode='r+'``) would have another "
"buffering. To disable buffering in ``TextIOWrapper``, consider using the "
"``write_through`` flag for :func:`io.TextIOWrapper.reconfigure`. When no "
"*buffering* argument is given, the default buffering policy works as follows:"
msgstr ""
"*buffering* - это опциональное целое число, используемое для установки "
"политики буферизации. Передайте 0, чтобы отключить буферизацию (разрешено "
"только в двоичном режиме), 1, чтобы выбрать строковую буферизацию "
"(используется только при записи в текстовом режиме), и целое число > 1, "
"чтобы указать размер в байтах буфера порций фиксированного размера. Обратите "
"внимание, что указание размера буфера таким образом применяется для "
"двоичного буферизованного ввода-вывода, но ``TextIOWrapper`` (т.е. файлы, "
"открытые с ``mode='r+'``), будут иметь другую буферизацию. Чтобы отключить "
"буферизацию в ``TextIOWrapper``, рассмотрите возможность использования флага "
"``write_through`` для :func:`io.TextIOWrapper.reconfigure`. Если аргумент "
"*buffering* не указан, политика буферизации по умолчанию работает следующим "
"образом:"

#: ../../library/functions.rst:1236
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"chosen using a heuristic trying to determine the underlying device's \"block "
"size\" and falling back on :const:`io.DEFAULT_BUFFER_SIZE`.  On many "
"systems, the buffer will typically be 4096 or 8192 bytes long."
msgstr ""
"Бинарные файлы буферизуются порциями фиксированного размера; размер буфера "
"выбирается с использованием эвристики, пытающейся определить \"размер "
"блока\" базового устройства и при неудаче прибегающей к значению по "
"умолчанию :const:`io.DEFAULT_BUFFER_SIZE`. На многих системах размер буфера "
"обычно составляет 4096 или 8192 байтов."

#: ../../library/functions.rst:1241
msgid ""
"\"Interactive\" text files (files for which :meth:`~io.IOBase.isatty` "
"returns ``True``) use line buffering.  Other text files use the policy "
"described above for binary files."
msgstr ""
"\"Интерактивные\" текстовые файлы (файлы, для которых :meth:`~io.IOBase."
"isatty` возвращает ``True``) используют буферизацию строк. Другие текстовые "
"файлы используют политику, описанную выше для двоичных файлов."

#: ../../library/functions.rst:1245
msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getencoding` returns), but any :term:`text "
"encoding` supported by Python can be used. See the :mod:`codecs` module for "
"the list of supported encodings."
msgstr ""
"*encoding* - это имя кодировки, используемой для декодирования или "
"кодирования файла. Это следует использовать только в текстовом режиме. "
"Кодировка по умолчанию зависит от платформы (то, что возвращает функция :"
"func:`locale.getencoding`), но можно использовать любую :term:`кодировку "
"текста`, поддерживаемую Python. См. модуль :mod:`codecs` для списка "
"поддерживаемых кодировок."

#: ../../library/functions.rst:1251
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled—this cannot be used in binary mode. A variety of "
"standard error handlers are available (listed under :ref:`error-handlers`), "
"though any error handling name that has been registered with :func:`codecs."
"register_error` is also valid.  The standard names include:"
msgstr ""
"*errors* - это опциональная строка, которая указывает, как обрабатывать "
"ошибки кодирования и декодирования - её нельзя использовать в двоичном "
"режиме. Доступно множество стандартных обработчиков ошибок (перечисленных в "
"разделе :ref:`error-handlers`), хотя также допустимо использование любого "
"имени обработчика ошибок, зарегистрированного с помощью :func:`codecs."
"register_error`. Стандартные имена включают:"

#: ../../library/functions.rst:1259
msgid ""
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error.  The default value of ``None`` has the same effect."
msgstr ""
"``'strict'`` для возбуждения исключения :exc:`ValueError`, если произошла "
"ошибка кодирования. Значение по умолчанию ``None`` имеет тот же эффект."

#: ../../library/functions.rst:1263
msgid ""
"``'ignore'`` ignores errors.  Note that ignoring encoding errors can lead to "
"data loss."
msgstr ""
"``'ignore'`` игнорирует ошибки. Обратите внимание, что игнорирование ошибок "
"кодирования может привести к потере данных."

#: ../../library/functions.rst:1266
msgid ""
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data."
msgstr ""
"``'replace'`` заставляет вставить маркер замены (например, ``'?'``) там, где "
"есть некорректные данные."

#: ../../library/functions.rst:1269
msgid ""
"``'surrogateescape'`` will represent any incorrect bytes as low surrogate "
"code units ranging from U+DC80 to U+DCFF. These surrogate code units will "
"then be turned back into the same bytes when the ``surrogateescape`` error "
"handler is used when writing data.  This is useful for processing files in "
"an unknown encoding."
msgstr ""
"``'surrogateescape'`` будет представлять любые некорректные байты в виде "
"единиц суррогатного кода, варьирующихся от U+DC80 до U+DCFF. Эти кодовые "
"единицы затем будут преобразованы обратно в те же байты при использовании "
"обработчика ошибок ``surrogateescape`` при записи данных. Это полезно для "
"обработки файлов в неизвестной кодировке."

#: ../../library/functions.rst:1276
msgid ""
"``'xmlcharrefreplace'`` is only supported when writing to a file. Characters "
"not supported by the encoding are replaced with the appropriate XML "
"character reference :samp:`&#{nnn};`."
msgstr ""
"``'xmlcharrefreplace'`` поддерживается только при записи в файл. Символы, не "
"поддерживаемые кодировкой, заменяются соответствующей ссылкой на символ XML :"
"samp:`&#{nnn};`."

#: ../../library/functions.rst:1280
msgid ""
"``'backslashreplace'`` replaces malformed data by Python's backslashed "
"escape sequences."
msgstr ""
"``'backslashreplace'`` заменяет некорректные данные последовательностями "
"экранирования обратной косой черты в Python."

#: ../../library/functions.rst:1283
msgid ""
"``'namereplace'`` (also only supported when writing) replaces unsupported "
"characters with ``\\N{...}`` escape sequences."
msgstr ""
"``'namereplace'`` (также поддерживается только при записи) заменяет "
"неподдерживаемые символы на последовательности экранирования ``\\N{...}``."

#: ../../library/functions.rst:1291
msgid ""
"*newline* determines how to parse newline characters from the stream. It can "
"be ``None``, ``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  It works as "
"follows:"
msgstr ""
"*newline* определяет, как анализировать символы новой строки из потока. Он "
"может быть ``None``, ``''``, ``'\\n'``, ``'\\r'`` и ``'\\r\\n'``. Он "
"работает следующим образом:"

#: ../../library/functions.rst:1295
msgid ""
"When reading input from the stream, if *newline* is ``None``, universal "
"newlines mode is enabled.  Lines in the input can end in ``'\\n'``, "
"``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before "
"being returned to the caller.  If it is ``''``, universal newlines mode is "
"enabled, but line endings are returned to the caller untranslated.  If it "
"has any of the other legal values, input lines are only terminated by the "
"given string, and the line ending is returned to the caller untranslated."
msgstr ""
"При чтении ввода из потока, если *newline* равно ``None``, включен режим "
"универсальных переводов строк. Строки во вводе могут заканчиваться на "
"``'\\n'``, ``'\\r'`` или ``'\\r\\n'``, и они переводятся в ``'\\n'`` перед "
"возвратом вызывающей стороне. Если *newline* равно ``''``, включен режим "
"универсальных переводов строк, но концы строк возвращаются вызывающей "
"стороне без изменений. Если *newline* имеет любое другое допустимое "
"значение, строки ввода завершаются только заданной строкой, и конец строки "
"возвращается вызывающей стороне без изменений."

#: ../../library/functions.rst:1303
msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, :"
"data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""
"При записи вывода в поток, если *newline* равно ``None``, все символы "
"``'\\n'``, записанные, будут преобразованы в системный разделитель строк по "
"умолчанию, :data:`os.linesep`. Если *newline* равно ``''`` или ``'\\n'``, "
"преобразование не выполняется. Если *newline* равно любому другому "
"допустимому значению, все записанные символы ``'\\n'`` будут преобразованы в "
"заданную строку."

#: ../../library/functions.rst:1309
msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* must be ``True`` (the default); "
"otherwise, an error will be raised."
msgstr ""
"Если *closefd* равно ``False`` и вместо имени файла был передан файловый "
"дескриптор, базовый файловый дескриптор будет оставлен открытым при закрытии "
"файла. Если указано имя файла, *closefd* должно быть равно ``True`` "
"(значение по умолчанию); в противном случае будет возбуждена ошибка."

#: ../../library/functions.rst:1314
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*file*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""
"Пользовательский открыватель может быть использован путем передачи "
"вызываемого объекта в качестве *opener*. Затем базовый файловый дескриптор "
"для объекта файла получается путем вызова *opener* с (*file*, *flags*). "
"*opener* должен вернуть открытый файловый дескриптор (передача :mod:`os."
"open` в качестве *opener* приводит к функциональности, аналогичной передаче "
"``None``)."

#: ../../library/functions.rst:1320
msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr "Новый созданный файл - это :ref:`non-inheritable <fd_inheritance>`."

#: ../../library/functions.rst:1322
msgid ""
"The following example uses the :ref:`dir_fd <dir_fd>` parameter of the :func:"
"`os.open` function to open a file relative to a given directory::"
msgstr ""
"Следующий пример использует параметр :ref:`dir_fd <dir_fd>` функции :func:"
"`os.open` для открытия файла относительно заданного каталога::"

#: ../../library/functions.rst:1335
msgid ""
"The type of :term:`file object` returned by the :func:`open` function "
"depends on the mode.  When :func:`open` is used to open a file in a text "
"mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :"
"class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used "
"to open a file in a binary mode with buffering, the returned class is a "
"subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read "
"binary mode, it returns an :class:`io.BufferedReader`; in write binary and "
"append binary modes, it returns an :class:`io.BufferedWriter`, and in read/"
"write mode, it returns an :class:`io.BufferedRandom`.  When buffering is "
"disabled, the raw stream, a subclass of :class:`io.RawIOBase`, :class:`io."
"FileIO`, is returned."
msgstr ""
"Тип :term:`файлового объекта`, возвращаемого функцией :func:`open`, зависит "
"от режима. При использовании :func:`open` для открытия файла в текстовом "
"режиме (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, и т.д.), возвращается "
"подкласс :class:`io.TextIOBase` (точнее :class:`io.TextIOWrapper`). При "
"использовании для открытия файла в бинарном режиме с буферизацией, "
"возвращаемый класс является подклассом :class:`io.BufferedIOBase`. Точный "
"класс может варьироваться: в режиме чтения бинарного файла возвращается :"
"class:`io.BufferedReader`; в режимах записи бинарного и добавления бинарного "
"возвращается :class:`io.BufferedWriter`, а в режиме чтения/записи "
"возвращается :class:`io.BufferedRandom`. При отключении буферизации "
"возвращается необработанный поток, подкласс :class:`io.RawIOBase`, :class:"
"`io.FileIO`."

#: ../../library/functions.rst:1356
msgid ""
"See also the file handling modules, such as :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile`, and :mod:`shutil`."
msgstr ""
"См. также модули обработки файлов, такие как :mod:`fileinput`, :mod:`io` "
"(где объявлена функция :func:`open`), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile` и :mod:`shutil`."

#: ../../library/functions.rst:1360
msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``file``, "
"``mode``, ``flags``."
msgstr ""
"Возбуждает :ref:`событие аудита <auditing>` с аргументами ``file``, "
"``mode``, ``flags``."

#: ../../library/functions.rst:1362
msgid ""
"The ``mode`` and ``flags`` arguments may have been modified or inferred from "
"the original call."
msgstr ""
"Аргументы ``mode`` и ``flags`` могут быть изменены или выведены из "
"оригинального вызова."

#: ../../library/functions.rst:1367
msgid "The *opener* parameter was added."
msgstr "Параметр *opener* был добавлен."

#: ../../library/functions.rst:1368
msgid "The ``'x'`` mode was added."
msgstr "Режим ``'x'`` был добавлен."

#: ../../library/functions.rst:1369
msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
":exc:`IOError` раньше использовался для возбуждения, теперь это псевдоним :"
"exc:`OSError`."

#: ../../library/functions.rst:1370
msgid ""
":exc:`FileExistsError` is now raised if the file opened in exclusive "
"creation mode (``'x'``) already exists."
msgstr ""
":exc:`FileExistsError` теперь возбуждается, если файл, открытый в "
"эксклюзивном режиме создания (``'x'``), уже существует."

#: ../../library/functions.rst:1375
msgid "The file is now non-inheritable."
msgstr "Файл теперь не наследуется."

#: ../../library/functions.rst:1379
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"Если системный вызов прерывается и обработчик сигнала не возбуждает "
"исключение, функция теперь повторяет системный вызов вместо возбуждения "
"исключения :exc:`InterruptedError` (см. :pep:`475` для объяснения)."

#: ../../library/functions.rst:1382
msgid "The ``'namereplace'`` error handler was added."
msgstr "Обработчик ошибок ``'namereplace'`` был добавлен."

#: ../../library/functions.rst:1386
msgid "Support added to accept objects implementing :class:`os.PathLike`."
msgstr ""
"Добавлена поддержка для принятия объектов, реализующих :class:`os.PathLike`."

#: ../../library/functions.rst:1387
msgid ""
"On Windows, opening a console buffer may return a subclass of :class:`io."
"RawIOBase` other than :class:`io.FileIO`."
msgstr ""
"На Windows открытие буфера консоли может вернуть подкласс :class:`io."
"RawIOBase`, отличный от :class:`io.FileIO`."

#: ../../library/functions.rst:1390
msgid "The ``'U'`` mode has been removed."
msgstr "Режим ``'U'`` был удален."

#: ../../library/functions.rst:1395
msgid ""
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('€')`` (Euro sign) returns "
"``8364``.  This is the inverse of :func:`chr`."
msgstr ""
"Даётся строка, представляющая один символ Юникода, возвращается целое число, "
"представляющее кодовую позицию Юникода этого символа. Например, ``ord('a')`` "
"возвращает целое число ``97``, а ``ord('€')`` (знак евро) возвращает "
"``8364``. Это обратное действие к :func:`chr`."

#: ../../library/functions.rst:1403
msgid ""
"Return *base* to the power *exp*; if *mod* is present, return *base* to the "
"power *exp*, modulo *mod* (computed more efficiently than ``pow(base, exp) % "
"mod``). The two-argument form ``pow(base, exp)`` is equivalent to using the "
"power operator: ``base**exp``."
msgstr ""
"Возвращает *base* в степени *exp*; если указан *mod*, возвращает *base* в "
"степени *exp*, по модулю *mod* (вычислено более эффективно, чем ``pow(base, "
"exp) % mod``). Двухаргументная форма ``pow(base, exp)`` эквивалентна "
"использованию оператора возведения в степень: ``base**exp``."

#: ../../library/functions.rst:1408
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``pow(10, "
"2)`` returns ``100``, but ``pow(10, -2)`` returns ``0.01``.  For a negative "
"base of type :class:`int` or :class:`float` and a non-integral exponent, a "
"complex result is delivered.  For example, ``pow(-9, 0.5)`` returns a value "
"close to ``3j``."
msgstr ""
"Аргументы должны иметь числовые типы. Смешанные типы операндов подчиняются "
"правилам приведения для бинарных арифметических операторов. Для операндов "
"типа :class:`int` результат имеет тот же тип, что и операнды (после "
"приведения), если только второй аргумент не является отрицательным; в этом "
"случае все аргументы преобразуются в тип *float* и возвращается результат "
"типа *float*. Например, ``pow(10, 2)`` возвращает ``100``, но ``pow(10, "
"-2)`` возвращает ``0.01``. Для отрицательного основания типа :class:`int` "
"или :class:`float` и нецелого показателя возвращается комплексный результат. "
"Например, ``pow(-9, 0.5)`` возвращает значение, близкое к ``3j``."

#: ../../library/functions.rst:1418
msgid ""
"For :class:`int` operands *base* and *exp*, if *mod* is present, *mod* must "
"also be of integer type and *mod* must be nonzero. If *mod* is present and "
"*exp* is negative, *base* must be relatively prime to *mod*. In that case, "
"``pow(inv_base, -exp, mod)`` is returned, where *inv_base* is an inverse to "
"*base* modulo *mod*."
msgstr ""
"Для :class:`int` операндов *base* и *exp*, если *mod* присутствует, *mod* "
"также должен быть целого типа и *mod* должен быть ненулевым. Если *mod* "
"присутствует и *exp* отрицательное, *base* должно быть взаимно простым с "
"*mod*. В этом случае возвращается ``pow(inv_base, -exp, mod)``, где "
"*inv_base* является обратным к *base* по модулю *mod*."

#: ../../library/functions.rst:1424
msgid "Here's an example of computing an inverse for ``38`` modulo ``97``::"
msgstr "Вот пример вычисления обратного значения для ``38`` по модулю ``97``::"

#: ../../library/functions.rst:1431
msgid ""
"For :class:`int` operands, the three-argument form of ``pow`` now allows the "
"second argument to be negative, permitting computation of modular inverses."
msgstr ""
"Для операндов :class:`int` теперь трехаргументная форма ``pow`` позволяет "
"второму аргументу быть отрицательным, что позволяет вычислять модульные "
"обратные значения."

#: ../../library/functions.rst:1436
msgid ""
"Allow keyword arguments.  Formerly, only positional arguments were supported."
msgstr ""
"Разрешены именованные аргументы. Ранее поддерживались только позиционные "
"аргументы."

#: ../../library/functions.rst:1443
msgid ""
"Print *objects* to the text stream *file*, separated by *sep* and followed "
"by *end*.  *sep*, *end*, *file*, and *flush*, if present, must be given as "
"keyword arguments."
msgstr ""
"Печатает *objects* в поток текста *file*, разделенные *sep* и с последующим "
"*end*. *sep*, *end*, *file* и *flush*, если они присутствуют, должны быть "
"указаны в виде именованных аргументов."

#: ../../library/functions.rst:1447
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""
"Все неименованные аргументы преобразуются в строки, как это делает функция :"
"func:`str`, и записываются в поток, разделенные *sep* и с последующим *end*. "
"И *sep*, и *end* должны быть строками; они также могут быть ``None``, что "
"означает использование значений по умолчанию. Если *objects* не указаны, :"
"func:`print` просто запишет *end*."

#: ../../library/functions.rst:1453
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Since printed "
"arguments are converted to text strings, :func:`print` cannot be used with "
"binary mode file objects.  For these, use ``file.write(...)`` instead."
msgstr ""
"Аргумент *file* должен быть объектом с методом ``write(string)``; если он "
"отсутствует или равен ``None``, будет использоваться :data:`sys.stdout`. "
"Поскольку аргументы для печати преобразуются в текстовые строки, :func:"
"`print` нельзя использовать с файловыми объектами в двоичном режиме. Вместо "
"этого используйте ``file.write(...)``."

#: ../../library/functions.rst:1458
msgid ""
"Output buffering is usually determined by *file*. However, if *flush* is "
"true, the stream is forcibly flushed."
msgstr ""
"Буферизация вывода обычно определяется *file*. Однако, если *flush* "
"истинный, поток принудительно сбрасывается."

#: ../../library/functions.rst:1462
msgid "Added the *flush* keyword argument."
msgstr "Добавлен именованный аргумент *flush*."

#: ../../library/functions.rst:1468
msgid "Return a property attribute."
msgstr "Возвращает атрибут свойства."

#: ../../library/functions.rst:1470
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""
"*fget* - функция для получения значения атрибута. *fset* - функция для "
"установки значения атрибута. *fdel* - функция для удаления значения "
"атрибута. И *doc* создает строку документации для атрибута."

#: ../../library/functions.rst:1474
msgid "A typical use is to define a managed attribute ``x``::"
msgstr "Типичное использование - определение управляемого атрибута ``x``::"

#: ../../library/functions.rst:1491
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter, and ``del c.x`` the deleter."
msgstr ""
"Если *c* является экземпляром *C*, ``c.x`` вызовет геттер, ``c.x = value`` "
"вызовет сеттер, а ``del c.x`` удалит его."

#: ../../library/functions.rst:1494
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""
"Если указано, *doc* будет строкой документации атрибута свойства. В "
"противном случае, свойство будет копировать строку документации *fget* (если "
"она существует). Это позволяет легко создавать свойства только для чтения, "
"используя :func:`property` в качестве :term:`декоратора`::"

#: ../../library/functions.rst:1507
msgid ""
"The ``@property`` decorator turns the :meth:`!voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""
"Декоратор ``@property`` превращает метод :meth:`!voltage` в \"геттер\" для "
"атрибута только-для-чтения с тем же именем, и устанавливает строку "
"документации для *voltage* равной \"Get the current voltage.\""

#: ../../library/functions.rst:1515
msgid ""
"A property object has ``getter``, ``setter``, and ``deleter`` methods usable "
"as decorators that create a copy of the property with the corresponding "
"accessor function set to the decorated function.  This is best explained "
"with an example:"
msgstr ""
"Объект свойства имеет методы ``getter``, ``setter`` и ``deleter``, которые "
"можно использовать в качестве декораторов, создающих копию свойства с "
"соответствующей функцией доступа, установленной в декорированную функцию. "
"Это лучше всего объяснить на примере:"

#: ../../library/functions.rst:1539
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""
"Этот код полностью эквивалентен первому примеру. Убедитесь, что "
"дополнительные функции имеют то же самое имя, что и исходное свойство (в "
"данном случае ``x``.)"

#: ../../library/functions.rst:1543
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""
"Возвращаемый объект свойства также имеет атрибуты ``fget``, ``fset`` и "
"``fdel``, соответствующие аргументам конструктора."

#: ../../library/functions.rst:1546
msgid "The docstrings of property objects are now writeable."
msgstr "Строки документации свойств теперь можно изменять."

#: ../../library/functions.rst:1555
msgid ""
"Rather than being a function, :class:`range` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`."
msgstr ""
"Вместо того чтобы быть функцией, :class:`range` на самом деле является "
"неизменяемым типом последовательности, как документировано в :ref:`typesseq-"
"range` и :ref:`typesseq`."

#: ../../library/functions.rst:1561
msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`; otherwise, "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`~object.__repr__` "
"method. If :func:`sys.displayhook` is not accessible, this function will "
"raise :exc:`RuntimeError`."
msgstr ""
"Возвращает строку, содержащую печатаемое представление объекта. Для многих "
"типов эта функция пытается вернуть строку, которая бы выдала объект с тем же "
"значением при передаче в :func:`eval`; в противном случае, представление - "
"это строка, заключенная в угловые скобки, которая содержит имя типа объекта "
"вместе с дополнительной информацией, часто включающей имя и адрес объекта. "
"Класс может контролировать, что эта функция возвращает для его экземпляров, "
"определяя метод :meth:`~object.__repr__`. Если :func:`sys.displayhook` "
"недоступен, эта функция вызовет :exc:`RuntimeError`."

#: ../../library/functions.rst:1572
msgid "This class has a custom representation that can be evaluated::"
msgstr ""

#: ../../library/functions.rst:1585
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`~object.__reversed__` method or supports the sequence protocol (the :"
"meth:`~object.__len__` method and the :meth:`~object.__getitem__` method "
"with integer arguments starting at ``0``)."
msgstr ""
"Возвращает обратный :term:`итератор`. *seq* должен быть объектом, который "
"имеет метод :meth:`~object.__reversed__` или поддерживает протокол "
"последовательности (методы :meth:`~object.__len__` и :meth:`~object."
"__getitem__` с целыми числовыми аргументами, начинающимися с ``0``)."

#: ../../library/functions.rst:1593
msgid ""
"Return *number* rounded to *ndigits* precision after the decimal point.  If "
"*ndigits* is omitted or is ``None``, it returns the nearest integer to its "
"input."
msgstr ""
"Возвращает *number* округленное до *ndigits* точности после десятичной "
"запятой. Если *ndigits* опущено или равно ``None``, то возвращается "
"ближайшее целое число к входному значению."

#: ../../library/functions.rst:1597
msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *ndigits*; if two multiples are "
"equally close, rounding is done toward the even choice (so, for example, "
"both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is "
"``2``).  Any integer value is valid for *ndigits* (positive, zero, or "
"negative).  The return value is an integer if *ndigits* is omitted or "
"``None``. Otherwise, the return value has the same type as *number*."
msgstr ""
"Для встроенных типов, поддерживающих функцию :func:`round`, значения "
"округляются до ближайшего кратного 10 в степени минус *ndigits*; если два "
"кратных значения одинаково близки, округление происходит в сторону четного "
"выбора (таким образом, например, и ``round(0.5)``, и ``round(-0.5)`` равны "
"``0``, а ``round(1.5)`` равно ``2``). Любое целое значение является верным "
"для *ndigits* (положительное, нулевое или отрицательное). Возвращаемое "
"значение является целым числом, если *ndigits* опущено или равно ``None``. В "
"противном случае, возвращаемое значение имеет тот же тип, что и *number*."

#: ../../library/functions.rst:1606
msgid ""
"For a general Python object ``number``, ``round`` delegates to ``number."
"__round__``."
msgstr ""
"Для общего объекта Python ``number``, ``round`` делегирует вызов ``number."
"__round__``."

#: ../../library/functions.rst:1611
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""
"Поведение :func:`round` для чисел с плавающей запятой может быть "
"удивительным: например, ``round(2.675, 2)`` дает ``2.67`` вместо ожидаемого "
"``2.68``. Это не ошибка: это результат того факта, что большинство "
"десятичных дробей не могут быть точно представлены в виде чисел с плавающей "
"запятой. См. :ref:`tut-fp-issues` для получения дополнительной информации."

#: ../../library/functions.rst:1623
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""
"Возвращает новый объект :class:`set`, опционально с элементами, взятыми из "
"*iterable*. ``set`` - это встроенный класс. См. :class:`set` и :ref:`types-"
"set` для документации об этом классе."

#: ../../library/functions.rst:1627
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""
"Для других контейнеров см. встроенные классы :class:`frozenset`, :class:"
"`list`, :class:`tuple` и :class:`dict`, а также модуль :mod:`collections`."

#: ../../library/functions.rst:1634
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string, and an arbitrary value.  The string may name an existing attribute "
"or a new attribute.  The function assigns the value to the attribute, "
"provided the object allows it.  For example, ``setattr(x, 'foobar', 123)`` "
"is equivalent to ``x.foobar = 123``."
msgstr ""
"Это аналог :func:`getattr`. Аргументы - это объект, строка и произвольное "
"значение. Строка может называть существующий или новый атрибут. Функция "
"присваивает значение атрибуту, если объект позволяет это сделать. Например, "
"``setattr(x, 'foobar', 123)`` эквивалентно ``x.foobar = 123``."

#: ../../library/functions.rst:1640
msgid ""
"*name* need not be a Python identifier as defined in :ref:`identifiers` "
"unless the object chooses to enforce that, for example in a custom :meth:"
"`~object.__getattribute__` or via :attr:`~object.__slots__`. An attribute "
"whose name is not an identifier will not be accessible using the dot "
"notation, but is accessible through :func:`getattr` etc.."
msgstr ""
"*name* не обязательно должно быть идентификатором Python, как определено в :"
"ref:`identifiers`, если объект выбирает принудительное выполнение этого, "
"например, в пользовательском :meth:`~object.__getattribute__` или через :"
"attr:`~object.__slots__`. Атрибут, имя которого не является идентификатором, "
"не будет доступен с использованием точечной нотации, но доступен через :func:"
"`getattr` и т.д.."

#: ../../library/functions.rst:1648
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to set it with :func:`setattr`."
msgstr ""
"Так как :ref:`искажение приватных имён <private-name-mangling>` происходит "
"во время компиляции, необходимо вручную изменить имя приватного атрибута "
"(атрибуты с двумя ведущими подчеркиваниями), чтобы установить его с помощью :"
"func:`setattr`."

#: ../../library/functions.rst:1657
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``."
msgstr ""
"Возвращает объект :term:`slice`, представляющий набор индексов, указанных с "
"помощью ``range(start, stop, step)``. Аргументы *start* и *step* по "
"умолчанию равны ``None``."

#: ../../library/functions.rst:1665
msgid ""
"Slice objects have read-only data attributes :attr:`!start`, :attr:`!stop`, "
"and :attr:`!step` which merely return the argument values (or their "
"default).  They have no other explicit functionality; however, they are used "
"by NumPy and other third-party packages."
msgstr ""
"Объекты отрезка имеют атрибуты данных только-для-чтения :attr:`!start`, :"
"attr:`!stop` и :attr:`!step`, которые просто возвращают значения аргументов "
"(или их значения по умолчанию). У них нет другой явной функциональности; "
"однако они используются NumPy и другими сторонними пакетами."

#: ../../library/functions.rst:1670
msgid ""
"Slice objects are also generated when extended indexing syntax is used.  For "
"example: ``a[start:stop:step]`` or ``a[start:stop, i]``.  See :func:"
"`itertools.islice` for an alternate version that returns an :term:`iterator`."
msgstr ""
"Объекты отрезков также создаются при использовании расширенного синтаксиса "
"индексирования. Например: ``a[start:stop:step]`` или ``a[start:stop, i]``. "
"См. :func:`itertools.islice` для альтернативной версии, которая возвращает :"
"term:`итератор`."

#: ../../library/functions.rst:1675
msgid ""
"Slice objects are now :term:`hashable` (provided :attr:`~slice.start`, :attr:"
"`~slice.stop`, and :attr:`~slice.step` are hashable)."
msgstr ""
"Объекты отрезков теперь являются хэшируемыми (при условии, что :attr:`~slice."
"start`, :attr:`~slice.stop` и :attr:`~slice.step` являются хэшируемыми)."

#: ../../library/functions.rst:1681
msgid "Return a new sorted list from the items in *iterable*."
msgstr "Возвращает новый отсортированный список из элементов в *iterable*."

#: ../../library/functions.rst:1683
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""
"Имеет два необязательных аргумента, которые должны быть указаны как "
"именованные аргументы."

#: ../../library/functions.rst:1685
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each element in *iterable* (for example, ``key=str."
"lower``).  The default value is ``None`` (compare the elements directly)."
msgstr ""
"*key* указывает на функцию с одним аргументом, которая используется для "
"извлечения ключа сравнения из каждого элемента в *iterable* (например, "
"``key=str.lower``). Значение по умолчанию - ``None`` (сравнение элементов "
"напрямую)."

#: ../../library/functions.rst:1689
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* - логическое значение. Если установлено значение ``True``, то "
"элементы списка сортируются так, как если бы каждое сравнение было обратным."

#: ../../library/functions.rst:1692
msgid ""
"Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a "
"*key* function."
msgstr ""
"Используйте :func:`functools.cmp_to_key` для преобразования старого стиля "
"функции *cmp* в функцию *key*."

#: ../../library/functions.rst:1695
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""
"Встроенная функция :func:`sorted` гарантирует стабильность. Сортировка "
"является стабильной, если она гарантирует сохранение относительного порядка "
"элементов, которые сравниваются как равные --- это полезно для сортировки в "
"несколько проходов (например, сортировка по отделу, затем по уровню "
"зарплаты)."

#: ../../library/functions.rst:1700
msgid ""
"The sort algorithm uses only ``<`` comparisons between items.  While "
"defining an :meth:`~object.__lt__` method will suffice for sorting, :PEP:`8` "
"recommends that all six :ref:`rich comparisons <comparisons>` be "
"implemented.  This will help avoid bugs when using the same data with other "
"ordering tools such as :func:`max` that rely on a different underlying "
"method.  Implementing all six comparisons also helps avoid confusion for "
"mixed type comparisons which can call reflected the :meth:`~object.__gt__` "
"method."
msgstr ""
"Алгоритм сортировки использует только сравнения ``<`` между элементами. В то "
"время как определение метода :meth:`~object.__lt__` будет достаточно для "
"сортировки, :PEP:`8` рекомендует реализовать все шесть :ref:`расширенных "
"сравнений <comparisons>`. Это поможет избежать ошибок при использовании тех "
"же данных с другими инструментами упорядочивания, такими как :func:`max`, "
"которые полагаются на другой базовый метод. Реализация всех шести сравнений "
"также помогает избежать путаницы при сравнении смешанных типов, которые "
"могут вызывать отраженный метод :meth:`~object.__gt__`."

#: ../../library/functions.rst:1709
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"Для примеров сортировки и краткого руководства по сортировке см. :ref:"
"`sortinghowto`."

#: ../../library/functions.rst:1713
msgid "Transform a method into a static method."
msgstr "Преобразовывает метод в статический метод."

#: ../../library/functions.rst:1715
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""
"Статический метод не получает неявный первый аргумент. Чтобы объявить "
"статический метод, используйте эту идиому::"

#: ../../library/functions.rst:1722
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"Форма ``@staticmethod`` является :term:`декоратором` функции - см. :ref:"
"`function` для получения подробной информации."

#: ../../library/functions.rst:1725
msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``). Moreover, they can be called as regular "
"functions (such as ``f()``)."
msgstr ""
"Статический метод может быть вызван как на классе (например, ``C.f()``), так "
"и на экземпляре (например, ``C().f()``). Более того, их можно вызывать как "
"обычные функции (например, ``f()``)."

#: ../../library/functions.rst:1729
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also, "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""
"Статические методы в Python аналогичны тем, которые можно найти в Java или C+"
"+. Также см. :func:`classmethod` для варианта, который полезен для создания "
"альтернативных конструкторов класса."

#: ../../library/functions.rst:1733
msgid ""
"Like all decorators, it is also possible to call ``staticmethod`` as a "
"regular function and do something with its result.  This is needed in some "
"cases where you need a reference to a function from a class body and you "
"want to avoid the automatic transformation to instance method.  For these "
"cases, use this idiom::"
msgstr ""
"Как и все декораторы, также возможно вызвать ``staticmethod`` как обычную "
"функцию и сделать что-нибудь с ее результатом. Это необходимо в некоторых "
"случаях, когда вам нужна ссылка на функцию из тела класса и вы хотите "
"избежать автоматического преобразования в метод экземпляра. Для таких "
"случаев используйте эту идиому::"

#: ../../library/functions.rst:1745
msgid "For more information on static methods, see :ref:`types`."
msgstr ""
"Для получения дополнительной информации о статических методах см. :ref:"
"`types`."

#: ../../library/functions.rst:1747
msgid ""
"Static methods now inherit the method attributes (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` and ``__annotations__``), have a "
"new ``__wrapped__`` attribute, and are now callable as regular functions."
msgstr ""
"Статические методы теперь наследуют атрибуты метода (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` и ``__annotations__``), имеют "
"новый атрибут ``__wrapped__`` и теперь могут быть вызваны как обычные "
"функции."

#: ../../library/functions.rst:1762
msgid ""
"Return a :class:`str` version of *object*.  See :func:`str` for details."
msgstr ""
"Возвращает :class:`str` версию *object*.  См. :func:`str` для подробностей."

#: ../../library/functions.rst:1764
msgid ""
"``str`` is the built-in string :term:`class`.  For general information about "
"strings, see :ref:`textseq`."
msgstr ""
"``str`` это встроенный :term:`класс` строки. Для получения общей информации "
"о строках см. :ref:`textseq`."

#: ../../library/functions.rst:1770
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  The *iterable*'s items are normally numbers, and the start value "
"is not allowed to be a string."
msgstr ""
"Суммирует *start* и элементы *iterable* слева направо и возвращает итоговую "
"сумму. Элементы *iterable* обычно являются числами, и значение *start* не "
"может быть строкой."

#: ../../library/functions.rst:1774
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""
"Для некоторых случаев использования существуют хорошие альтернативы для :"
"func:`sum`. Предпочтительный и быстрый способ конкатенации "
"последовательности строк - вызов ``''.join(sequence)``. Для сложения чисел с "
"плавающей точкой с расширенной точностью см. :func:`math.fsum`\\. Для "
"конкатенации серии итерируемых объектов рассмотрите использование :func:"
"`itertools.chain`."

#: ../../library/functions.rst:1780
msgid "The *start* parameter can be specified as a keyword argument."
msgstr "Параметр *start* может быть указан как именованный аргумент."

#: ../../library/functions.rst:1783
msgid ""
"Summation of floats switched to an algorithm that gives higher accuracy on "
"most builds."
msgstr ""
"Суммирование чисел с плавающей запятой заменено на алгоритм, который "
"обеспечивает более высокую точность в большинстве сборок."

#: ../../library/functions.rst:1790
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class."
msgstr ""
"Возвращает объект-прокси, который делегирует вызовы методов родительскому "
"или смежному классу *type*. Это полезно для доступа к унаследованным "
"методам, которые были переопределены в классе."

#: ../../library/functions.rst:1794
msgid ""
"The *object_or_type* determines the :term:`method resolution order` to be "
"searched.  The search starts from the class right after the *type*."
msgstr ""
"*object_or_type* определяет :term:`порядок разрешения методов`, который "
"будет искаться. Поиск начинается с класса, следующего сразу после *type*."

#: ../../library/functions.rst:1798
msgid ""
"For example, if :attr:`~class.__mro__` of *object_or_type* is ``D -> B -> C -"
"> A -> object`` and the value of *type* is ``B``, then :func:`super` "
"searches ``C -> A -> object``."
msgstr ""
"Например, если :attr:`~class.__mro__` *object_or_type* это ``D -> B -> C -> "
"A -> object`` и значение *type* это ``B``, тогда :func:`super` ищет ``C -> A "
"-> object``."

#: ../../library/functions.rst:1802
msgid ""
"The :attr:`~class.__mro__` attribute of the *object_or_type* lists the "
"method resolution search order used by both :func:`getattr` and :func:"
"`super`.  The attribute is dynamic and can change whenever the inheritance "
"hierarchy is updated."
msgstr ""
"Атрибут :attr:`~class.__mro__` *object_or_type* перечисляет порядок поиска "
"разрешения методов, используемый как :func:`getattr`, так и :func:`super`. "
"Атрибут является динамическим и может изменяться при обновлении иерархии "
"наследования."

#: ../../library/functions.rst:1807
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""
"Если второй аргумент опущен, возвращаемый объект супер является "
"непривязанным. Если второй аргумент является объектом, ``isinstance(obj, "
"type)`` должно быть истиной. Если второй аргумент является типом, "
"``issubclass(type2, type)`` должно быть истиной (это полезно для классовых "
"методов)."

#: ../../library/functions.rst:1812
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""
"Есть два типичных случая использования *super*. В иерархии классов с "
"одиночным наследованием *super* может использоваться для ссылки на "
"родительские классы без явного указания их имен, что делает код более "
"поддерживаемым. Это использование тесно соответствует использованию *super* "
"в других языках программирования."

#: ../../library/functions.rst:1817
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"such implementations have the same calling signature in every case (because "
"the order of calls is determined at runtime, because that order adapts to "
"changes in the class hierarchy, and because that order can include sibling "
"classes that are unknown prior to runtime)."
msgstr ""
"Второй сценарий использования - поддержка совместного множественного "
"наследования в динамической среде выполнения. Этот сценарий использования "
"уникален для Python и не встречается в статически компилируемых языках или "
"языках, которые поддерживают только одиночное наследование. Это позволяет "
"реализовывать \"алмазные диаграммы\", где несколько базовых классов "
"реализуют один и тот же метод. Хороший дизайн предписывает, чтобы такие "
"реализации имели одинаковую подпись вызова в каждом случае (потому что "
"порядок вызовов определяется во время выполнения, потому что этот порядок "
"адаптируется к изменениям в иерархии классов и потому что этот порядок может "
"включать дочерние классы, которые неизвестны до времени выполнения)."

#: ../../library/functions.rst:1827
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""
"Для обоих случаев использования типичный вызов суперкласса выглядит так::"

#: ../../library/functions.rst:1834
msgid ""
"In addition to method lookups, :func:`super` also works for attribute "
"lookups.  One possible use case for this is calling :term:`descriptors "
"<descriptor>` in a parent or sibling class."
msgstr ""
"В дополнение к поиску методов, :func:`super` также работает для поиска "
"атрибутов. Один из возможных случаев использования - вызов :term:"
"`дескрипторов <descriptor>` в родительском или дочернем классе."

#: ../../library/functions.rst:1838
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`~object.__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""
"Обратите внимание, что :func:`super` реализована как часть процесса "
"связывания для поисков явных точечных атрибутов, таких как ``super()."
"__getitem__(name)``. Она делает это, реализуя собственный метод :meth:"
"`~object.__getattribute__` для поиска классов в предсказуемом порядке, "
"который поддерживает кооперативное множественное наследование. "
"Следовательно, :func:`super` не определена для неявных поисков с "
"использованием инструкций или операторов, таких как ``super()[name]``."

#: ../../library/functions.rst:1846
msgid ""
"Also note that, aside from the zero argument form, :func:`super` is not "
"limited to use inside methods.  The two argument form specifies the "
"arguments exactly and makes the appropriate references.  The zero argument "
"form only works inside a class definition, as the compiler fills in the "
"necessary details to correctly retrieve the class being defined, as well as "
"accessing the current instance for ordinary methods."
msgstr ""
"Также обратите внимание, что помимо формы без аргументов, :func:`super` не "
"ограничивается использованием внутренних методов. Форма с двумя аргументами "
"указывает аргументы точно и делает соответствующие ссылки. Форма без "
"аргументов работает только внутри определения класса, так как компилятор "
"заполняет необходимые детали для правильного получения определяемого класса, "
"а также доступа к текущему экземпляру для обычных методов."

#: ../../library/functions.rst:1853
msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""
"Для практических рекомендаций по проектированию кооперативных классов с "
"использованием :func:`super`, см. `руководство по использованию super() "
"<https://rhettinger.wordpress.com/2011/05/26/super-considered-super/>`_."

#: ../../library/functions.rst:1863
msgid ""
"Rather than being a function, :class:`tuple` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`."
msgstr ""
"Вместо того чтобы быть функцией, :class:`tuple` на самом деле является "
"неизменяемым типом последовательности, как документировано в :ref:`typesseq-"
"tuple` и :ref:`typesseq`."

#: ../../library/functions.rst:1872
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object and generally the same object as returned by :attr:`object."
"__class__ <instance.__class__>`."
msgstr ""
"С одним аргументом возвращает тип *object*. Возвращаемое значение - это "
"объект типа и, как правило, тот же объект, который возвращается :attr:"
"`object.__class__ <instance.__class__>`."

#: ../../library/functions.rst:1876
msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type "
"of an object, because it takes subclasses into account."
msgstr ""
"Встроенная функция :func:`isinstance` рекомендуется для проверки типа "
"объекта, так как она учитывает подклассы."

#: ../../library/functions.rst:1880
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute. The "
"*bases* tuple contains the base classes and becomes the :attr:`~class."
"__bases__` attribute; if empty, :class:`object`, the ultimate base of all "
"classes, is added.  The *dict* dictionary contains attribute and method "
"definitions for the class body; it may be copied or wrapped before becoming "
"the :attr:`~object.__dict__` attribute. The following two statements create "
"identical :class:`type` objects:"
msgstr ""
"С тремя аргументами возвращает новый объект типа. По сути, это динамическая "
"форма инструкции :keyword:`class`. Строка *name* является именем класса и "
"становится атрибутом :attr:`~definition.__name__`. Кортеж *bases* содержит "
"базовые классы и становится атрибутом :attr:`~class.__bases__`; если пустой, "
"добавляется :class:`object`, конечный базовый класс всех классов. Словарь "
"*dict* содержит определения атрибутов и методов для тела класса; он может "
"быть скопирован или обёрнут перед тем, как стать атрибутом :attr:`~object."
"__dict__`. Следующие две инструкции создают идентичные объекты :class:`type`:"

#: ../../library/functions.rst:1895
msgid "See also :ref:`bltin-type-objects`."
msgstr "См. также :ref:`bltin-type-objects`."

#: ../../library/functions.rst:1897
msgid ""
"Keyword arguments provided to the three argument form are passed to the "
"appropriate metaclass machinery (usually :meth:`~object.__init_subclass__`) "
"in the same way that keywords in a class definition (besides *metaclass*) "
"would."
msgstr ""
"Именованные аргументы, предоставленные для трехаргументной формы, передаются "
"соответствующему механизму метакласса (обычно :meth:`~object."
"__init_subclass__`) таким же образом, как ключевые слова в определении "
"класса (кроме *metaclass*)."

#: ../../library/functions.rst:1902
msgid "See also :ref:`class-customization`."
msgstr "См. также :ref:`class-customization`."

#: ../../library/functions.rst:1904
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"Подклассы :class:`type`, которые не переопределяют ``type.__new__``, больше "
"не могут использовать форму с одним аргументом для получения типа объекта."

#: ../../library/functions.rst:1911
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""
"Возвращает атрибут :attr:`~object.__dict__` для модуля, класса, экземпляра "
"или любого другого объекта с атрибутом :attr:`~object.__dict__`."

#: ../../library/functions.rst:1914
msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`~object.__dict__` attributes (for example, classes use a :class:"
"`types.MappingProxyType` to prevent direct dictionary updates)."
msgstr ""
"Объекты, такие как модули и экземпляры, имеют обновляемый атрибут :attr:"
"`~object.__dict__`; однако, у других объектов может быть ограничение на "
"запись их атрибутов :attr:`~object.__dict__` (например, классы используют :"
"class:`types.MappingProxyType` для предотвращения прямых обновлений словаря)."

#: ../../library/functions.rst:1919
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""
"Без аргумента, :func:`vars` действует как :func:`locals`. Обратите внимание, "
"что словарь *locals* полезен только для чтения, поскольку обновления словаря "
"*locals* игнорируются."

#: ../../library/functions.rst:1923
msgid ""
"A :exc:`TypeError` exception is raised if an object is specified but it "
"doesn't have a :attr:`~object.__dict__` attribute (for example, if its class "
"defines the :attr:`~object.__slots__` attribute)."
msgstr ""
"Возбуждается исключение :exc:`TypeError`, если указан объект, но у него нет "
"атрибута :attr:`~object.__dict__` (например, если его класс определяет "
"атрибут :attr:`~object.__slots__`)."

#: ../../library/functions.rst:1929
msgid ""
"Iterate over several iterables in parallel, producing tuples with an item "
"from each one."
msgstr ""
"Итерируется по нескольким итерируемым объектам параллельно, создавая кортежи "
"с элементом из каждого из них."

#: ../../library/functions.rst:1932
msgid "Example::"
msgstr "Пример::"

#: ../../library/functions.rst:1941
msgid ""
"More formally: :func:`zip` returns an iterator of tuples, where the *i*-th "
"tuple contains the *i*-th element from each of the argument iterables."
msgstr ""
"Более формально: :func:`zip` возвращает итератор кортежей, где *i*-й кортеж "
"содержит *i*-й элемент из каждого из аргументов итерируемых объектов"

#: ../../library/functions.rst:1944
msgid ""
"Another way to think of :func:`zip` is that it turns rows into columns, and "
"columns into rows.  This is similar to `transposing a matrix <https://en."
"wikipedia.org/wiki/Transpose>`_."
msgstr ""
"Другой способ представить :func:`zip` заключается в том, что он превращает "
"строки в столбцы и столбцы в строки. Это похоже на `транспонирование матрицы "
"<https://ru.wikipedia.org/wiki/"
"%D0%A2%D1%80%D0%B0%D0%BD%D1%81%D0%BF%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BC%D0%B0%D1%82%D1%80%D0%B8%D1%86%D0%B0>`_."

#: ../../library/functions.rst:1948
msgid ""
":func:`zip` is lazy: The elements won't be processed until the iterable is "
"iterated on, e.g. by a :keyword:`!for` loop or by wrapping in a :class:"
"`list`."
msgstr ""
":func:`zip` ленивый: Элементы не будут обрабатываться, пока не будет "
"выполнено итерирование по итерируемому объекту, например, с помощью цикла :"
"keyword:`!for` или обертки в :class:`list`."

#: ../../library/functions.rst:1952
msgid ""
"One thing to consider is that the iterables passed to :func:`zip` could have "
"different lengths; sometimes by design, and sometimes because of a bug in "
"the code that prepared these iterables.  Python offers three different "
"approaches to dealing with this issue:"
msgstr ""
"Одна вещь, которую следует учесть, заключается в том, что итерируемые "
"объекты, передаваемые в :func:`zip`, могут иметь разную длину; иногда это "
"сделано намеренно, а иногда из-за ошибки в коде, который подготовил эти "
"итерируемые объекты. Python предлагает три разных подхода к решению этой "
"проблемы."

#: ../../library/functions.rst:1957
msgid ""
"By default, :func:`zip` stops when the shortest iterable is exhausted. It "
"will ignore the remaining items in the longer iterables, cutting off the "
"result to the length of the shortest iterable::"
msgstr ""
"По умолчанию, :func:`zip` останавливается, когда исчерпывается самый "
"короткий итерируемый объект. Он игнорирует оставшиеся элементы в более "
"длинных итерируемых объектах, обрезая результат до длины самого короткого "
"итерируемого объекта::"

#: ../../library/functions.rst:1964
msgid ""
":func:`zip` is often used in cases where the iterables are assumed to be of "
"equal length.  In such cases, it's recommended to use the ``strict=True`` "
"option. Its output is the same as regular :func:`zip`::"
msgstr ""
":func:`zip` часто используется в случаях, когда предполагается, что "
"итерируемые объекты имеют одинаковую длину. В таких случаях рекомендуется "
"использовать опцию ``strict=True``. Его вывод аналогичен обычному :func:"
"`zip`::"

#: ../../library/functions.rst:1971
msgid ""
"Unlike the default behavior, it raises a :exc:`ValueError` if one iterable "
"is exhausted before the others:"
msgstr ""
"В отличие от поведения по умолчанию, оно возбуждает :exc:`ValueError`, если "
"один итерируемый объект исчерпывается раньше других."

#: ../../library/functions.rst:1989
msgid ""
"Without the ``strict=True`` argument, any bug that results in iterables of "
"different lengths will be silenced, possibly manifesting as a hard-to-find "
"bug in another part of the program."
msgstr ""
"Без аргумента ``strict=True``, любая ошибка, приводящая к итерируемым "
"объектам разной длины, будет подавлена, что может проявиться как "
"труднонаходимая ошибка в другой части программы."

#: ../../library/functions.rst:1993
msgid ""
"Shorter iterables can be padded with a constant value to make all the "
"iterables have the same length.  This is done by :func:`itertools."
"zip_longest`."
msgstr ""
"Более короткие итерируемые объекты могут быть заполнены постоянным "
"значением, чтобы все итерируемые объекты имели одинаковую длину. Это "
"делается с помощью :func:`itertools.zip_longest`."

#: ../../library/functions.rst:1997
msgid ""
"Edge cases: With a single iterable argument, :func:`zip` returns an iterator "
"of 1-tuples.  With no arguments, it returns an empty iterator."
msgstr ""
"Крайние случаи: С одним итерируемым аргументом, :func:`zip` возвращает "
"итератор из 1-кортежей. Без аргументов возвращает пустой итератор."

#: ../../library/functions.rst:2000
msgid "Tips and tricks:"
msgstr "Советы и хитрости:"

#: ../../library/functions.rst:2002
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n, strict=True)``.  This repeats the *same* iterator "
"``n`` times so that each output tuple has the result of ``n`` calls to the "
"iterator. This has the effect of dividing the input into n-length chunks."
msgstr ""
"Порядок вычисления итерируемых объектов слева направо гарантирован. Это "
"позволяет использовать идиому для кластеризации серии данных в группы длиной "
"n с использованием ``zip(*[iter(s)]*n, strict=True)``. Это повторяет *тот "
"же* итератор ``n`` раз, чтобы каждый выходной кортеж содержал результат "
"``n`` вызовов итератора. Это приводит к разделению входных данных на части "
"длиной n."

#: ../../library/functions.rst:2008
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""
":func:`zip` в сочетании с оператором ``*`` можно использовать для "
"разархивации списка::"

#: ../../library/functions.rst:2019
msgid "Added the ``strict`` argument."
msgstr "Добавлен аргумент ``strict``."

#: ../../library/functions.rst:2031
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""
"Это продвинутая функция, которая не нужна в повседневном программировании на "
"Python, в отличие от :func:`importlib.import_module`."

#: ../../library/functions.rst:2034
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the :keyword:`!"
"import` statement, but doing so is **strongly** discouraged as it is usually "
"simpler to use import hooks (see :pep:`302`) to attain the same goals and "
"does not cause issues with code which assumes the default import "
"implementation is in use.  Direct use of :func:`__import__` is also "
"discouraged in favor of :func:`importlib.import_module`."
msgstr ""
"Эта функция вызывается инструкцией :keyword:`import`. Ее можно заменить "
"(импортировав модуль :mod:`builtins` и присвоив ``builtins.__import__``) для "
"изменения семантики инструкции :keyword:`!import`, но это **настоятельно** "
"не рекомендуется, так как обычно проще использовать хуки импорта (см. :pep:"
"`302`) для достижения тех же целей, и это не вызывает проблем с кодом, "
"который предполагает использование реализации импорта по умолчанию. Прямое "
"использование :func:`__import__` также не рекомендуется в пользу функции :"
"func:`importlib.import_module`."

#: ../../library/functions.rst:2043
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""
"Функция импортирует модуль *name*, потенциально используя заданные *globals* "
"и *locals* для определения того, как интерпретировать имя в контексте "
"пакета. *fromlist* содержит имена объектов или подмодулей, которые должны "
"быть импортированы из модуля, заданного *name*. Стандартная реализация "
"вообще не использует аргумент *locals* и использует аргумент *globals* "
"только для определения контекста пакета инструкции :keyword:`import`."

#: ../../library/functions.rst:2050
msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__` (see :pep:`328` for the "
"details)."
msgstr ""
"*level* указывает, следует ли использовать абсолютные или относительные "
"импорты. ``0`` (значение по умолчанию) означает, что выполняются только "
"абсолютные импорты. Положительные значения для *level* указывают количество "
"родительских каталогов для поиска относительно каталога модуля, вызывающего :"
"func:`__import__` (см. :pep:`328` для подробностей)."

#: ../../library/functions.rst:2056
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""
"Когда переменная *name* имеет форму ``package.module``, обычно возвращается "
"пакет верхнего уровня (имя до первой точки), а не модуль, указанный в "
"*name*. Однако, если указан аргумент *fromlist*, содержащий не пустое "
"значение, возвращается модуль, указанный в *name*."

#: ../../library/functions.rst:2061
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""
"Например, инструкция ``import spam`` приводит к байт-коду, похожему на "
"следующий код::"

#: ../../library/functions.rst:2066
msgid "The statement ``import spam.ham`` results in this call::"
msgstr "Инструкция ``import spam.ham`` приводит к такому вызову::"

#: ../../library/functions.rst:2070
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""
"Обратите внимание, как :func:`__import__` возвращает модуль верхнего уровня, "
"потому что это объект, который связан с именем с помощью инструкции :keyword:"
"`import`."

#: ../../library/functions.rst:2073
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""
"С другой стороны, инструкция ``from spam.ham import eggs, sausage as saus`` "
"приводит к ::"

#: ../../library/functions.rst:2080
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""
"Здесь модуль ``spam.ham`` возвращается из :func:`__import__`. Из этого "
"объекта извлекаются и присваиваются имена для импорта их соответствующим "
"именам."

#: ../../library/functions.rst:2084
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""
"Если вы просто хотите импортировать модуль (возможно, внутри пакета) по "
"имени, используйте :func:`importlib.import_module`."

#: ../../library/functions.rst:2087
msgid ""
"Negative values for *level* are no longer supported (which also changes the "
"default value to 0)."
msgstr ""
"Отрицательные значения для *level* больше не поддерживаются (что также "
"изменяет значение по умолчанию на 0)."

#: ../../library/functions.rst:2091
msgid ""
"When the command line options :option:`-E` or :option:`-I` are being used, "
"the environment variable :envvar:`PYTHONCASEOK` is now ignored."
msgstr ""
"Когда используются опции командной строки :option:`-E` или :option:`-I`, "
"переменная окружения :envvar:`PYTHONCASEOK` теперь игнорируется."

#: ../../library/functions.rst:2096
msgid "Footnotes"
msgstr "Сноски"

#: ../../library/functions.rst:2097
msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""
"Обратите внимание, что парсер принимает только соглашение о конце строки в "
"стиле Unix. Если вы считываете код из файла, убедитесь, что используете "
"режим преобразования перевода строки для преобразования переводов строки в "
"стиле Windows или Mac."

#: ../../library/functions.rst:153
msgid "Boolean"
msgstr "Логический тип"

#: ../../library/functions.rst:153 ../../library/functions.rst:1870
msgid "type"
msgstr "тип"

#: ../../library/functions.rst:576
msgid "built-in function"
msgstr "встроенная функция"

#: ../../library/functions.rst:576
msgid "exec"
msgstr "exec"

#: ../../library/functions.rst:653
msgid "NaN"
msgstr "NaN"

#: ../../library/functions.rst:653
msgid "Infinity"
msgstr "Бесконечность"

#: ../../library/functions.rst:717
msgid "__format__"
msgstr "__format__"

#: ../../library/functions.rst:717 ../../library/functions.rst:1754
msgid "string"
msgstr "строка"

#: ../../library/functions.rst:717
msgid "format() (built-in function)"
msgstr "format() (встроенная функция)"

#: ../../library/functions.rst:1165
msgid "file object"
msgstr "файловый объект"

#: ../../library/functions.rst:1165 ../../library/functions.rst:1286
msgid "open() built-in function"
msgstr "встроенная функция open()"

#: ../../library/functions.rst:1193
msgid "file"
msgstr "файл"

#: ../../library/functions.rst:1193
msgid "modes"
msgstr "режимы"

#: ../../library/functions.rst:1286
msgid "universal newlines"
msgstr "универсальные переводы строк"

#: ../../library/functions.rst:1347
msgid "line-buffered I/O"
msgstr "ввод/вывод с буферизацией по строкам"

#: ../../library/functions.rst:1347
msgid "unbuffered I/O"
msgstr "ввод/вывод без буферизации"

#: ../../library/functions.rst:1347
msgid "buffer size, I/O"
msgstr "размер буфера, ввод/вывод"

#: ../../library/functions.rst:1347
msgid "I/O control"
msgstr "управление ввода/вывода"

#: ../../library/functions.rst:1347
msgid "buffering"
msgstr "буферизация"

#: ../../library/functions.rst:1347
msgid "text mode"
msgstr "текстовый режим"

#: ../../library/functions.rst:1347 ../../library/functions.rst:2025
msgid "module"
msgstr "модуль"

#: ../../library/functions.rst:1347
msgid "sys"
msgstr "sys"

#: ../../library/functions.rst:1754
msgid "str() (built-in function)"
msgstr "str() (встроенная функция)"

#: ../../library/functions.rst:1870
msgid "object"
msgstr "объект"

#: ../../library/functions.rst:2025
msgid "statement"
msgstr "инструкция"

#: ../../library/functions.rst:2025
msgid "import"
msgstr "импорт"

#: ../../library/functions.rst:2025
msgid "builtins"
msgstr "встроенные"
